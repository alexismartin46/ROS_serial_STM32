
rosserial_stm32_chatter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d70  08006d70  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d78  08006d78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  20000074  08006df8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  08006df8  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fbb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa1  00000000  00000000  0003505f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00037b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000387f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f047  00000000  00000000  00039410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb18  00000000  00000000  00058457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdba3  00000000  00000000  00067f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125b12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  00125b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006ab4 	.word	0x08006ab4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006ab4 	.word	0x08006ab4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	0a5a      	lsrs	r2, r3, #9
 80005e4:	490f      	ldr	r1, [pc, #60]	; (8000624 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80005e6:	fba1 1202 	umull	r1, r2, r1, r2
 80005ea:	09d2      	lsrs	r2, r2, #7
 80005ec:	490e      	ldr	r1, [pc, #56]	; (8000628 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80005ee:	fb01 f202 	mul.w	r2, r1, r2
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	4a09      	ldr	r2, [pc, #36]	; (8000624 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	09db      	lsrs	r3, r3, #7
 8000604:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	441a      	add	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	00044b83 	.word	0x00044b83
 8000628:	3b9aca00 	.word	0x3b9aca00

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f002 f9cd 	bl	80029ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f80d 	bl	8000652 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f91e 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 800063c:	f000 f8ea 	bl	8000814 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000640:	f000 f852 	bl	80006e8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000644:	f000 f89a 	bl	800077c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8000648:	f001 fa8e 	bl	8001b68 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800064c:	f001 fa9c 	bl	8001b88 <loop>
 8000650:	e7fc      	b.n	800064c <main+0x20>

08000652 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b094      	sub	sp, #80	; 0x50
 8000656:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	2238      	movs	r2, #56	; 0x38
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fd61 	bl	8006128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000674:	2000      	movs	r0, #0
 8000676:	f003 f833 	bl	80036e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2340      	movs	r3, #64	; 0x40
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000690:	2304      	movs	r3, #4
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000694:	2355      	movs	r3, #85	; 0x55
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 f8cd 	bl	8003848 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006b4:	f000 f946 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2303      	movs	r3, #3
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2104      	movs	r1, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fbd1 	bl	8003e78 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006dc:	f000 f932 	bl	8000944 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 80006ee:	4a22      	ldr	r2, [pc, #136]	; (8000778 <MX_LPUART1_UART_Init+0x90>)
 80006f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 800072c:	f003 ffb0 	bl	8004690 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f905 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 800073e:	f005 fbd4 	bl	8005eea <HAL_UARTEx_SetTxFifoThreshold>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000748:	f000 f8fc 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	f005 fc09 	bl	8005f66 <HAL_UARTEx_SetRxFifoThreshold>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800075a:	f000 f8f3 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	f005 fb8a 	bl	8005e78 <HAL_UARTEx_DisableFifoMode>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800076a:	f000 f8eb 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000090 	.word	0x20000090
 8000778:	40008000 	.word	0x40008000

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_USART1_UART_Init+0x90>)
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <MX_USART1_UART_Init+0x94>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_USART1_UART_Init+0x90>)
 8000788:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_USART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_USART1_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_USART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007c6:	f003 ff63 	bl	8004690 <HAL_UART_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f8b8 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007d8:	f005 fb87 	bl	8005eea <HAL_UARTEx_SetTxFifoThreshold>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f000 f8af 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007ea:	f005 fbbc 	bl	8005f66 <HAL_UARTEx_SetRxFifoThreshold>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f8a6 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_USART1_UART_Init+0x90>)
 80007fa:	f005 fb3d 	bl	8005e78 <HAL_UARTEx_DisableFifoMode>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 f89e 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000120 	.word	0x20000120
 8000810:	40013800 	.word	0x40013800

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_DMA_Init+0x60>)
 800081c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_DMA_Init+0x60>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6493      	str	r3, [r2, #72]	; 0x48
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_DMA_Init+0x60>)
 8000828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_DMA_Init+0x60>)
 8000834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_DMA_Init+0x60>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6493      	str	r3, [r2, #72]	; 0x48
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_DMA_Init+0x60>)
 8000840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	200b      	movs	r0, #11
 8000850:	f002 fa2b 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000854:	200b      	movs	r0, #11
 8000856:	f002 fa42 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	200c      	movs	r0, #12
 8000860:	f002 fa23 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000864:	200c      	movs	r0, #12
 8000866:	f002 fa3a 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_GPIO_Init+0xc4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a2a      	ldr	r2, [pc, #168]	; (800093c <MX_GPIO_Init+0xc4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_GPIO_Init+0xc4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <MX_GPIO_Init+0xc4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a24      	ldr	r2, [pc, #144]	; (800093c <MX_GPIO_Init+0xc4>)
 80008ac:	f043 0320 	orr.w	r3, r3, #32
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_GPIO_Init+0xc4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0320 	and.w	r3, r3, #32
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_GPIO_Init+0xc4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_GPIO_Init+0xc4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_GPIO_Init+0xc4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_GPIO_Init+0xc4>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_GPIO_Init+0xc4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f002 fec1 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000900:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0xc8>)
 8000912:	f002 fd31 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000916:	2320      	movs	r3, #32
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f002 fd22 	bl	8003378 <HAL_GPIO_Init>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000800 	.word	0x48000800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>

0800094e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <_ZN3ros3MsgC1Ev+0x1c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	08006cec 	.word	0x08006cec

08000990 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
      data()
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ffe8 	bl	8000970 <_ZN3ros3MsgC1Ev>
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3304      	adds	r3, #4
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ffcf 	bl	800094e <_ZN3ros4TimeC1Ev>
    {
    }
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08006cd4 	.word	0x08006cd4

080009c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6859      	ldr	r1, [r3, #4]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	b2ca      	uxtb	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	0a19      	lsrs	r1, r3, #8
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	4413      	add	r3, r2
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	0c19      	lsrs	r1, r3, #16
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3302      	adds	r3, #2
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	b2ca      	uxtb	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	0e19      	lsrs	r1, r3, #24
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3303      	adds	r3, #3
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3304      	adds	r3, #4
 8000a16:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6899      	ldr	r1, [r3, #8]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	0a19      	lsrs	r1, r3, #8
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	b2ca      	uxtb	r2, r1
 8000a36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	0c19      	lsrs	r1, r3, #16
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3302      	adds	r3, #2
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	0e19      	lsrs	r1, r3, #24
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3303      	adds	r3, #3
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	b2ca      	uxtb	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a62:	68fb      	ldr	r3, [r7, #12]
    }
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	6839      	ldr	r1, [r7, #0]
 8000a96:	440b      	add	r3, r1
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	440b      	add	r3, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3303      	adds	r3, #3
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	440b      	add	r3, r1
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	061b      	lsls	r3, r3, #24
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	440b      	add	r3, r1
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3302      	adds	r3, #2
 8000b00:	6839      	ldr	r1, [r7, #0]
 8000b02:	440b      	add	r3, r1
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3303      	adds	r3, #3
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	440b      	add	r3, r1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	061b      	lsls	r3, r3, #24
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3304      	adds	r3, #4
 8000b28:	60fb      	str	r3, [r7, #12]
     return offset;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    }
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	08006acc 	.word	0x08006acc

08000b54 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	08006adc 	.word	0x08006adc

08000b70 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fef8 	bl	8000970 <_ZN3ros3MsgC1Ev>
 8000b80:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	809a      	strh	r2, [r3, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b9c:	611a      	str	r2, [r3, #16]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
    {
    }
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08006cbc 	.word	0x08006cbc
 8000bb4:	08006b00 	.word	0x08006b00

08000bb8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	8899      	ldrh	r1, [r3, #4]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2ca      	uxtb	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	889b      	ldrh	r3, [r3, #4]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b299      	uxth	r1, r3
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	3301      	adds	r3, #1
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	b2ca      	uxtb	r2, r1
 8000be6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	3302      	adds	r3, #2
 8000bec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fb14 	bl	8000220 <strlen>
 8000bf8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	69b9      	ldr	r1, [r7, #24]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fff0 	bl	8001be8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	18d0      	adds	r0, r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f005 fa76 	bl	800610c <memcpy>
      offset += length_topic_name;
 8000c20:	69fa      	ldr	r2, [r7, #28]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4413      	add	r3, r2
 8000c26:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff faf7 	bl	8000220 <strlen>
 8000c32:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	6979      	ldr	r1, [r7, #20]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 ffd3 	bl	8001be8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	18d0      	adds	r0, r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f005 fa59 	bl	800610c <memcpy>
      offset += length_message_type;
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4413      	add	r3, r2
 8000c60:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fada 	bl	8000220 <strlen>
 8000c6c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	6939      	ldr	r1, [r7, #16]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 ffb6 	bl	8001be8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	3304      	adds	r3, #4
 8000c80:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	18d0      	adds	r0, r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f005 fa3c 	bl	800610c <memcpy>
      offset += length_md5sum;
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	4413      	add	r3, r2
 8000c9a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000ca2:	68f9      	ldr	r1, [r7, #12]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	0a19      	lsrs	r1, r3, #8
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	0c19      	lsrs	r1, r3, #16
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	0e19      	lsrs	r1, r3, #24
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	61fb      	str	r3, [r7, #28]
      return offset;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
    }
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b08a      	sub	sp, #40	; 0x28
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	889b      	ldrh	r3, [r3, #4]
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	3301      	adds	r3, #1
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	440b      	add	r3, r1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	441a      	add	r2, r3
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 ff72 	bl	8001c24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	3304      	adds	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	4413      	add	r3, r2
 8000d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d20c      	bcs.n	8000d70 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	441a      	add	r2, r3
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	440b      	add	r3, r1
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	e7ec      	b.n	8000d4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4413      	add	r3, r2
 8000d76:	3b01      	subs	r3, #1
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	441a      	add	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	4413      	add	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	441a      	add	r2, r3
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 ff3f 	bl	8001c24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	3304      	adds	r3, #4
 8000daa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4413      	add	r3, r2
 8000db6:	6a3a      	ldr	r2, [r7, #32]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d20c      	bcs.n	8000dd6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	441a      	add	r2, r3
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	440b      	add	r3, r1
 8000dca:	7812      	ldrb	r2, [r2, #0]
 8000dcc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	e7ec      	b.n	8000db0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4413      	add	r3, r2
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	441a      	add	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4413      	add	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	441a      	add	r2, r3
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 ff0c 	bl	8001c24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d20c      	bcs.n	8000e3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	441a      	add	r2, r3
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	440b      	add	r3, r1
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	3301      	adds	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e7ec      	b.n	8000e16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	3b01      	subs	r3, #1
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	441a      	add	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	440a      	add	r2, r1
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	3301      	adds	r3, #1
 8000e78:	6839      	ldr	r1, [r7, #0]
 8000e7a:	440b      	add	r3, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	3302      	adds	r3, #2
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	440b      	add	r3, r1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	041b      	lsls	r3, r3, #16
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	440b      	add	r3, r1
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	061b      	lsls	r3, r3, #24
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	61bb      	str	r3, [r7, #24]
     return offset;
 8000eb4:	69bb      	ldr	r3, [r7, #24]
    }
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	08006b04 	.word	0x08006b04

08000edc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	08006b20 	.word	0x08006b20

08000ef8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd34 	bl	8000970 <_ZN3ros3MsgC1Ev>
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	711a      	strb	r2, [r3, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000f18:	609a      	str	r2, [r3, #8]
    {
    }
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08006ca4 	.word	0x08006ca4
 8000f28:	08006b00 	.word	0x08006b00

08000f2c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	7912      	ldrb	r2, [r2, #4]
 8000f44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f965 	bl	8000220 <strlen>
 8000f56:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fe41 	bl	8001be8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	18d0      	adds	r0, r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f005 f8c7 	bl	800610c <memcpy>
      offset += length_msg;
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
      return offset;
 8000f86:	68fb      	ldr	r3, [r7, #12]
    }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	3301      	adds	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	441a      	add	r2, r3
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fe31 	bl	8001c24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d20c      	bcs.n	8000ff2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	441a      	add	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e7ec      	b.n	8000fcc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	3b01      	subs	r3, #1
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	441a      	add	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
     return offset;
 8001016:	693b      	ldr	r3, [r7, #16]
    }
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	08006b44 	.word	0x08006b44

0800103c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	08006b58 	.word	0x08006b58

08001058 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fc84 	bl	8000970 <_ZN3ros3MsgC1Ev>
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	08006c8c 	.word	0x08006c8c

080010b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6859      	ldr	r1, [r3, #4]
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	b2ca      	uxtb	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	0a19      	lsrs	r1, r3, #8
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	4413      	add	r3, r2
 80010de:	b2ca      	uxtb	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	0c19      	lsrs	r1, r3, #16
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	3302      	adds	r3, #2
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	b2ca      	uxtb	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	0e19      	lsrs	r1, r3, #24
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	3303      	adds	r3, #3
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	b2ca      	uxtb	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	3304      	adds	r3, #4
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	6a3a      	ldr	r2, [r7, #32]
 8001116:	429a      	cmp	r2, r3
 8001118:	d22b      	bcs.n	8001172 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001128:	6939      	ldr	r1, [r7, #16]
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	b2ca      	uxtb	r2, r1
 8001132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	0a19      	lsrs	r1, r3, #8
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	3301      	adds	r3, #1
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	b2ca      	uxtb	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	0c19      	lsrs	r1, r3, #16
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3302      	adds	r3, #2
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	4413      	add	r3, r2
 8001150:	b2ca      	uxtb	r2, r1
 8001152:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	0e19      	lsrs	r1, r3, #24
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3303      	adds	r3, #3
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	b2ca      	uxtb	r2, r1
 8001162:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	3304      	adds	r3, #4
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	3301      	adds	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	e7ce      	b.n	8001110 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	b2ca      	uxtb	r2, r1
 800117e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	0a19      	lsrs	r1, r3, #8
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	0c19      	lsrs	r1, r3, #16
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	3302      	adds	r3, #2
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	b2ca      	uxtb	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	0e19      	lsrs	r1, r3, #24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	3303      	adds	r3, #3
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	3304      	adds	r3, #4
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d22b      	bcs.n	8001222 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80011d8:	68f9      	ldr	r1, [r7, #12]
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	0a19      	lsrs	r1, r3, #8
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	3301      	adds	r3, #1
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	0c19      	lsrs	r1, r3, #16
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	3302      	adds	r3, #2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	b2ca      	uxtb	r2, r1
 8001202:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	0e19      	lsrs	r1, r3, #24
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	3303      	adds	r3, #3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	3304      	adds	r3, #4
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	e7ce      	b.n	80011c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69d9      	ldr	r1, [r3, #28]
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	b2ca      	uxtb	r2, r1
 800122e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	0a19      	lsrs	r1, r3, #8
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	3301      	adds	r3, #1
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	4413      	add	r3, r2
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	0c19      	lsrs	r1, r3, #16
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	3302      	adds	r3, #2
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	b2ca      	uxtb	r2, r1
 8001252:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	0e19      	lsrs	r1, r3, #24
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	3303      	adds	r3, #3
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	3304      	adds	r3, #4
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	429a      	cmp	r2, r3
 8001278:	d228      	bcs.n	80012cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ffca 	bl	8000220 <strlen>
 800128c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	4413      	add	r3, r2
 8001294:	6979      	ldr	r1, [r7, #20]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fca6 	bl	8001be8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	3304      	adds	r3, #4
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	18d0      	adds	r0, r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	4619      	mov	r1, r3
 80012b8:	f004 ff28 	bl	800610c <memcpy>
      offset += length_stringsi;
 80012bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4413      	add	r3, r2
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	e7d1      	b.n	8001270 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80012ce:	4618      	mov	r0, r3
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b08e      	sub	sp, #56	; 0x38
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80012e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80012ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f0:	3301      	adds	r3, #1
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	6a3a      	ldr	r2, [r7, #32]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001302:	3302      	adds	r3, #2
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	6a3a      	ldr	r2, [r7, #32]
 800130e:	4313      	orrs	r3, r2
 8001310:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001314:	3303      	adds	r3, #3
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	061b      	lsls	r3, r3, #24
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	4313      	orrs	r3, r2
 8001322:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	3304      	adds	r3, #4
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	6a3a      	ldr	r2, [r7, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	d90a      	bls.n	800134a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f004 fefa 	bl	8006138 <realloc>
 8001344:	4602      	mov	r2, r0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a3a      	ldr	r2, [r7, #32]
 800134e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800135a:	429a      	cmp	r2, r3
 800135c:	d236      	bcs.n	80013cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	440a      	add	r2, r1
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	4313      	orrs	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001374:	3301      	adds	r3, #1
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	440b      	add	r3, r1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	4313      	orrs	r3, r2
 8001380:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	3302      	adds	r3, #2
 8001388:	6839      	ldr	r1, [r7, #0]
 800138a:	440b      	add	r3, r1
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	4313      	orrs	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	3303      	adds	r3, #3
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	440b      	add	r3, r1
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	4313      	orrs	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	3304      	adds	r3, #4
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80013c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c6:	3301      	adds	r3, #1
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
 80013ca:	e7c3      	b.n	8001354 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80013cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d8:	3301      	adds	r3, #1
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	3302      	adds	r3, #2
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	3303      	adds	r3, #3
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4313      	orrs	r3, r2
 800140a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	3304      	adds	r3, #4
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	429a      	cmp	r2, r3
 800141a:	d90a      	bls.n	8001432 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f004 fe86 	bl	8006138 <realloc>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001442:	429a      	cmp	r2, r3
 8001444:	d236      	bcs.n	80014b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	440a      	add	r2, r1
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	3301      	adds	r3, #1
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	440b      	add	r3, r1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	3302      	adds	r3, #2
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	440b      	add	r3, r1
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001480:	3303      	adds	r3, #3
 8001482:	6839      	ldr	r1, [r7, #0]
 8001484:	440b      	add	r3, r1
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	3304      	adds	r3, #4
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	3214      	adds	r2, #20
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	3301      	adds	r3, #1
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b2:	e7c3      	b.n	800143c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	3301      	adds	r3, #1
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80014d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d2:	3302      	adds	r3, #2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	3303      	adds	r3, #3
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80014f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f6:	3304      	adds	r3, #4
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	429a      	cmp	r2, r3
 8001502:	d90a      	bls.n	800151a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f004 fe12 	bl	8006138 <realloc>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800152a:	429a      	cmp	r2, r3
 800152c:	d23f      	bcs.n	80015ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	441a      	add	r2, r3
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fb72 	bl	8001c24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001542:	3304      	adds	r3, #4
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
 800154a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	429a      	cmp	r2, r3
 8001554:	d20c      	bcs.n	8001570 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	441a      	add	r2, r3
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	3b01      	subs	r3, #1
 8001560:	6839      	ldr	r1, [r7, #0]
 8001562:	440b      	add	r3, r1
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	3301      	adds	r3, #1
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e7ec      	b.n	800154a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	3b01      	subs	r3, #1
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001582:	3b01      	subs	r3, #1
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	441a      	add	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800158c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	3220      	adds	r2, #32
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	3301      	adds	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ac:	e7ba      	b.n	8001524 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80015b0:	4618      	mov	r0, r3
 80015b2:	3738      	adds	r7, #56	; 0x38
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	08006c28 	.word	0x08006c28

080015d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	08006b7c 	.word	0x08006b7c

080015f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68d8      	ldr	r0, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6891      	ldr	r1, [r2, #8]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4798      	blx	r3
 800163c:	4603      	mov	r3, r0
  };
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
  }
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <_ZN13STM32HardwareC1Ev+0x34>)
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	20000120 	.word	0x20000120

080016bc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f804 	bl	80016d2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e6:	4619      	mov	r1, r3
 80016e8:	f003 f8b4 	bl	8004854 <HAL_UART_Receive_DMA>
    }
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
      int c = -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffa8 	bl	800165e <_ZN13STM32Hardware10getRdmaIndEv>
 800170e:	4603      	mov	r3, r0
 8001710:	429c      	cmp	r4, r3
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d012      	beq.n	8001744 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	791b      	ldrb	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800173a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001744:	68fb      	ldr	r3, [r7, #12]
    }
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
	...

08001750 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001760:	2b20      	cmp	r3, #32
 8001762:	d108      	bne.n	8001776 <_ZN13STM32Hardware5flushEv+0x26>
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	f083 0301 	eor.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZN13STM32Hardware5flushEv+0x26>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <_ZN13STM32Hardware5flushEv+0x28>
 8001776:	2300      	movs	r3, #0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d055      	beq.n	8001828 <_ZN13STM32Hardware5flushEv+0xd8>
        mutex = true;
 800177c:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <_ZN13STM32Hardware5flushEv+0xe0>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800178e:	429a      	cmp	r2, r3
 8001790:	d047      	beq.n	8001822 <_ZN13STM32Hardware5flushEv+0xd2>
          uint16_t len = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d217      	bcs.n	80017d6 <_ZN13STM32Hardware5flushEv+0x86>
			len = twind - tfind;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	89fa      	ldrh	r2, [r7, #14]
 80017ce:	4619      	mov	r1, r3
 80017d0:	f002 ffae 	bl	8004730 <HAL_UART_Transmit_DMA>
 80017d4:	e01f      	b.n	8001816 <_ZN13STM32Hardware5flushEv+0xc6>
		  }else{
			len = tbuflen - tfind;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80017e2:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	89fa      	ldrh	r2, [r7, #14]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f002 ff99 	bl	8004730 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);					// modified by A. Martin
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f002 ff8d 	bl	8004730 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001822:	4b03      	ldr	r3, [pc, #12]	; (8001830 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
      }
    }
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000270 	.word	0x20000270

08001834 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184a:	bfa8      	it	ge
 800184c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001850:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)tbuflen - (int)twind ? n : (int)tbuflen - (int)twind;	// modified by A. Martin
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001858:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4293      	cmp	r3, r2
 8001860:	bfa8      	it	ge
 8001862:	4613      	movge	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800186c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fc47 	bl	800610c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4413      	add	r3, r2
 8001888:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	429a      	cmp	r2, r3
 8001898:	d00b      	beq.n	80018b2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	18d1      	adds	r1, r2, r3
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	f004 fc2d 	bl	800610c <memcpy>
      }

      flush();
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff ff4c 	bl	8001750 <_ZN13STM32Hardware5flushEv>
    }
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	f001 f8e6 	bl	8002a98 <HAL_GetTick>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
      data("")
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f844 	bl	8000970 <_ZN3ros3MsgC1Ev>
 80018e8:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_ZN8std_msgs6StringC1Ev+0x28>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80018f2:	605a      	str	r2, [r3, #4]
    {
    }
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	08006c60 	.word	0x08006c60
 8001904:	08006b00 	.word	0x08006b00

08001908 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fc80 	bl	8000220 <strlen>
 8001920:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	4413      	add	r3, r2
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f95c 	bl	8001be8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3304      	adds	r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	18d0      	adds	r0, r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	4619      	mov	r1, r3
 8001944:	f004 fbe2 	bl	800610c <memcpy>
      offset += length_data;
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001950:	68fb      	ldr	r3, [r7, #12]
    }
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	441a      	add	r2, r3
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f955 	bl	8001c24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	3304      	adds	r3, #4
 800197e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	d20c      	bcs.n	80019aa <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	441a      	add	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3b01      	subs	r3, #1
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	440b      	add	r3, r1
 800199e:	7812      	ldrb	r2, [r2, #0]
 80019a0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e7ec      	b.n	8001984 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	3b01      	subs	r3, #1
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3b01      	subs	r3, #1
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	441a      	add	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
     return offset;
 80019ce:	693b      	ldr	r3, [r7, #16]
    }
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	08006ba0 	.word	0x08006ba0

080019f4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	08006bb0 	.word	0x08006bb0

08001a10 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	08006c78 	.word	0x08006c78

08001a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ffe8 	bl	8001a10 <_ZN3ros15NodeHandleBase_C1Ev>
 8001a40:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe1a 	bl	8001684 <_ZN13STM32HardwareC1Ev>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fb53 	bl	8006128 <memset>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 fb4a 	bl	8006128 <memset>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001a9a:	2264      	movs	r2, #100	; 0x64
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fb42 	bl	8006128 <memset>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001aaa:	2264      	movs	r2, #100	; 0x64
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fb3a 	bl	8006128 <memset>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff faa4 	bl	8001058 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	08006c4c 	.word	0x08006c4c

08001b20 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[32];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_UART_TxCpltCallback+0x20>)
 8001b2a:	f000 f8a0 	bl	8001c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe0d 	bl	8001750 <_ZN13STM32Hardware5flushEv>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000274 	.word	0x20000274

08001b44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_UART_RxCpltCallback+0x20>)
 8001b4e:	f000 f88e 	bl	8001c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fdbc 	bl	80016d2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000274 	.word	0x20000274

08001b68 <setup>:

void setup(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  nh.initNode();
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <setup+0x18>)
 8001b6e:	f000 f88a 	bl	8001c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8001b72:	4904      	ldr	r1, [pc, #16]	; (8001b84 <setup+0x1c>)
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <setup+0x18>)
 8001b76:	f000 f8a3 	bl	8001cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000274 	.word	0x20000274
 8001b84:	20000bbc 	.word	0x20000bbc

08001b88 <loop>:

void loop(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
#endif
#ifdef STM32F3xx
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
#endif
#ifdef STM32G4xx	// added by A. Martin
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b92:	f001 fd8b 	bl	80036ac <HAL_GPIO_TogglePin>
#endif

  //str_msg.data = hello;
  snprintf(hello,32,"hello world %d",i);
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <loop+0x48>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <loop+0x4c>)
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <loop+0x50>)
 8001ba0:	f004 fb16 	bl	80061d0 <sniprintf>
  str_msg.data = hello;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <loop+0x54>)
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <loop+0x50>)
 8001ba8:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8001baa:	490c      	ldr	r1, [pc, #48]	; (8001bdc <loop+0x54>)
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <loop+0x58>)
 8001bae:	f7ff fd36 	bl	800161e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <loop+0x5c>)
 8001bb4:	f000 f8b4 	bl	8001d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  i++;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <loop+0x48>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <loop+0x48>)
 8001bc0:	6013      	str	r3, [r2, #0]

  HAL_Delay(1000);
 8001bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc6:	f000 ff73 	bl	8002ab0 <HAL_Delay>
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000bb0 	.word	0x20000bb0
 8001bd4:	08006bd4 	.word	0x08006bd4
 8001bd8:	20000bd0 	.word	0x20000bd0
 8001bdc:	20000bb4 	.word	0x20000bb4
 8001be0:	20000bbc 	.word	0x20000bbc
 8001be4:	20000274 	.word	0x20000274

08001be8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d80d      	bhi.n	8001c18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	fa22 f103 	lsr.w	r1, r2, r3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e7ee      	b.n	8001bf6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d811      	bhi.n	8001c62 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6839      	ldr	r1, [r7, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	440a      	add	r2, r1
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	00d2      	lsls	r2, r2, #3
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e7ea      	b.n	8001c38 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
  }
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fd12 	bl	80016bc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b18      	cmp	r3, #24
 8001cd2:	dc1e      	bgt.n	8001d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d111      	bne.n	8001d0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	60da      	str	r2, [r3, #12]
        return true;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e004      	b.n	8001d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e7dd      	b.n	8001cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001d12:	2300      	movs	r3, #0
  }
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fdc7 	bl	80018c0 <_ZN13STM32Hardware4timeEv>
 8001d32:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d903      	bls.n	8001d4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d903      	bls.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d014      	beq.n	8001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fda0 	bl	80018c0 <_ZN13STM32Hardware4timeEv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad2      	subs	r2, r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	bf8c      	ite	hi
 8001d90:	2301      	movhi	r3, #1
 8001d92:	2300      	movls	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001d9a:	f06f 0301 	mvn.w	r3, #1
 8001d9e:	e194      	b.n	80020ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fca5 	bl	80016f4 <_ZN13STM32Hardware4readEv>
 8001daa:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f2c0 8174 	blt.w	800209c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	441a      	add	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dca:	2b07      	cmp	r3, #7
 8001dcc:	d11e      	bne.n	8001e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001dd4:	1c59      	adds	r1, r3, #1
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	b2d1      	uxtb	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	460a      	mov	r2, r1
 8001de6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1b4      	bne.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2208      	movs	r2, #8
 8001e06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e0a:	e7af      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d128      	bne.n	8001e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2bff      	cmp	r3, #255	; 0xff
 8001e1a:	d10d      	bne.n	8001e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f103 0214 	add.w	r2, r3, #20
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001e36:	e799      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd3f 	bl	80018c0 <_ZN13STM32Hardware4timeEv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf8c      	ite	hi
 8001e50:	2301      	movhi	r3, #1
 8001e52:	2300      	movls	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d088      	beq.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001e62:	f06f 0301 	mvn.w	r3, #1
 8001e66:	e130      	b.n	80020ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d118      	bne.n	8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2bfe      	cmp	r3, #254	; 0xfe
 8001e76:	d107      	bne.n	8001e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e86:	e771      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f47f af68 	bne.w	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f918 	bl	80020d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001ea2:	e763      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d113      	bne.n	8001ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001ed4:	e74a      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d110      	bne.n	8001f02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	441a      	add	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f00:	e734      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d116      	bne.n	8001f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001f12:	425a      	negs	r2, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	bf58      	it	pl
 8001f1a:	4253      	negpl	r3, r2
 8001f1c:	2bff      	cmp	r3, #255	; 0xff
 8001f1e:	d107      	bne.n	8001f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f2e:	e71d      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f38:	e718      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10f      	bne.n	8001f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001f62:	e703      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d117      	bne.n	8001f9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2207      	movs	r2, #7
 8001f84:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f47f aeec 	bne.w	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2208      	movs	r2, #8
 8001f98:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f9c:	e6e6      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	f47f aee1 	bne.w	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001fb8:	425a      	negs	r2, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	bf58      	it	pl
 8001fc0:	4253      	negpl	r3, r2
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	f47f aed2 	bne.w	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d110      	bne.n	8001ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f87d 	bl	80020d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f898 	bl	800210e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	e06a      	b.n	80020ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ffa:	2b0a      	cmp	r3, #10
 8001ffc:	d107      	bne.n	800200e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f960 	bl	80022cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800200c:	e6ae      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002014:	2b06      	cmp	r3, #6
 8002016:	d10e      	bne.n	8002036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7ff f955 	bl	80012d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002034:	e69a      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800203c:	2b0b      	cmp	r3, #11
 800203e:	d104      	bne.n	800204a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002048:	e690      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002050:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f202 2222 	addw	r2, r2, #546	; 0x222
 800205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f43f ae84 	beq.w	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800206a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002074:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800207e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002096:	4611      	mov	r1, r2
 8002098:	4798      	blx	r3
    while (true)
 800209a:	e667      	b.n	8001d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800209c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00f      	beq.n	80020c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d906      	bls.n	80020c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f809 	bl	80020d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80020c8:	2300      	movs	r3, #0
  }
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fc56 	bl	8000990 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	210a      	movs	r1, #10
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
    rt_time = hardware_.time();
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fbe1 	bl	80018c0 <_ZN13STM32Hardware4timeEv>
 80020fe:	4602      	mov	r2, r0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800210e:	b590      	push	{r4, r7, lr}
 8002110:	b08b      	sub	sp, #44	; 0x2c
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fd28 	bl	8000b70 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2b18      	cmp	r3, #24
 8002128:	dc63      	bgt.n	80021f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d056      	beq.n	80021ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	b29b      	uxth	r3, r3
 800214e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	6859      	ldr	r1, [r3, #4]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3308      	adds	r3, #8
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4608      	mov	r0, r1
 800218a:	4798      	blx	r3
 800218c:	4603      	mov	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4608      	mov	r0, r1
 80021b8:	4798      	blx	r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80021be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681c      	ldr	r4, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fa34 	bl	8001646 <_ZN3ros9Publisher15getEndpointTypeEv>
 80021de:	4601      	mov	r1, r0
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	461a      	mov	r2, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	3301      	adds	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	e798      	b.n	8002124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	2b18      	cmp	r3, #24
 80021fa:	dc5f      	bgt.n	80022bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d053      	beq.n	80022b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	b29b      	uxth	r3, r3
 800221c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002222:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002236:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3308      	adds	r3, #8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4608      	mov	r0, r1
 800224e:	4798      	blx	r3
 8002250:	4603      	mov	r3, r0
 8002252:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	f202 2222 	addw	r2, r2, #546	; 0x222
 800225c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	330c      	adds	r3, #12
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4608      	mov	r0, r1
 8002274:	4798      	blx	r3
 8002276:	4603      	mov	r3, r0
 8002278:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800227a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800227e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681c      	ldr	r4, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800228e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002296:	f202 2222 	addw	r2, r2, #546	; 0x222
 800229a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3304      	adds	r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4798      	blx	r3
 80022a8:	4601      	mov	r1, r0
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	461a      	mov	r2, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	3301      	adds	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e79c      	b.n	80021f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80022c4:	bf00      	nop
 80022c6:	372c      	adds	r7, #44	; 0x2c
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}

080022cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fb58 	bl	8000990 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff faeb 	bl	80018c0 <_ZN13STM32Hardware4timeEv>
 80022ea:	4602      	mov	r2, r0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fbb7 	bl	8000a70 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4915      	ldr	r1, [pc, #84]	; (800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002308:	fba1 1303 	umull	r1, r3, r1, r3
 800230c:	099b      	lsrs	r3, r3, #6
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002312:	6939      	ldr	r1, [r7, #16]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002318:	fba3 0302 	umull	r0, r3, r3, r2
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002322:	fb00 f303 	mul.w	r3, r0, r3
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	440b      	add	r3, r1
 8002330:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8a6 	bl	800248c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fabb 	bl	80018c0 <_ZN13STM32Hardware4timeEv>
 800234a:	4602      	mov	r2, r0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	10624dd3 	.word	0x10624dd3
 8002360:	000f4240 	.word	0x000f4240

08002364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b63      	cmp	r3, #99	; 0x63
 8002374:	dd09      	ble.n	800238a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002386:	2300      	movs	r3, #0
 8002388:	e079      	b.n	800247e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002396:	3207      	adds	r2, #7
 8002398:	4611      	mov	r1, r2
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
 800239e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	22fe      	movs	r2, #254	; 0xfe
 80023ac:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80023d6:	4413      	add	r3, r2
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	121b      	asrs	r3, r3, #8
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002402:	2305      	movs	r3, #5
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3306      	adds	r3, #6
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	429a      	cmp	r2, r3
 800240e:	dc0d      	bgt.n	800242c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4413      	add	r3, r2
 8002416:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	3301      	adds	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e7ec      	b.n	8002406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3307      	adds	r3, #7
 8002430:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	425a      	negs	r2, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	bf58      	it	pl
 800243c:	4253      	negpl	r3, r2
 800243e:	b2da      	uxtb	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	6179      	str	r1, [r7, #20]
 8002446:	43d2      	mvns	r2, r2
 8002448:	b2d1      	uxtb	r1, r2
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4413      	add	r3, r2
 800244e:	460a      	mov	r2, r1
 8002450:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800245a:	dc0a      	bgt.n	8002472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1d18      	adds	r0, r3, #4
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4619      	mov	r1, r3
 800246a:	f7ff f9e3 	bl	8001834 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	e005      	b.n	800247e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002472:	4905      	ldr	r1, [pc, #20]	; (8002488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f849 	bl	800250c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	08006be4 	.word	0x08006be4

0800248c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fa10 	bl	80018c0 <_ZN13STM32Hardware4timeEv>
 80024a0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4915      	ldr	r1, [pc, #84]	; (8002500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80024aa:	fba1 1303 	umull	r1, r3, r1, r3
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	1e5a      	subs	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80024c2:	fba3 0302 	umull	r0, r3, r3, r2
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024cc:	fb00 f303 	mul.w	r3, r0, r3
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	1aca      	subs	r2, r1, r3
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80024dc:	4413      	add	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f7fe f86e 	bl	80005d4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	10624dd3 	.word	0x10624dd3
 8002504:	000f4240 	.word	0x000f4240
 8002508:	3b9aca00 	.word	0x3b9aca00

0800250c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	2103      	movs	r1, #3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f804 	bl	8002528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	460b      	mov	r3, r1
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fcdc 	bl	8000ef8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f107 0214 	add.w	r2, r7, #20
 8002552:	2107      	movs	r1, #7
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	4798      	blx	r3
  }
 8002558:	bf00      	nop
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_Z41__static_initialization_and_destruction_0ii>:
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d110      	bne.n	8002592 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002576:	4293      	cmp	r3, r2
 8002578:	d10b      	bne.n	8002592 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 800257a:	4808      	ldr	r0, [pc, #32]	; (800259c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800257c:	f7ff fa58 	bl	8001a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002582:	f7ff f9a9 	bl	80018d8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002586:	2300      	movs	r3, #0
 8002588:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800258a:	4906      	ldr	r1, [pc, #24]	; (80025a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800258c:	4806      	ldr	r0, [pc, #24]	; (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800258e:	f7ff f82f 	bl	80015f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000274 	.word	0x20000274
 80025a0:	20000bb4 	.word	0x20000bb4
 80025a4:	08006c20 	.word	0x08006c20
 80025a8:	20000bbc 	.word	0x20000bbc

080025ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    return configured_;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_GLOBAL__sub_I_nh>:
 80025c6:	b580      	push	{r7, lr}
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7ff ffc6 	bl	8002560 <_Z41__static_initialization_and_destruction_0ii>
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_MspInit+0x44>)
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_MspInit+0x44>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_MspInit+0x44>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_MspInit+0x44>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_MspInit+0x44>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_MspInit+0x44>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800260e:	f001 f90b 	bl	8003828 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b09c      	sub	sp, #112	; 0x70
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002638:	f107 0318 	add.w	r3, r7, #24
 800263c:	2244      	movs	r2, #68	; 0x44
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fd71 	bl	8006128 <memset>
  if(huart->Instance==LPUART1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6b      	ldr	r2, [pc, #428]	; (80027f8 <HAL_UART_MspInit+0x1d8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d137      	bne.n	80026c0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002650:	2320      	movs	r3, #32
 8002652:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002658:	f107 0318 	add.w	r3, r7, #24
 800265c:	4618      	mov	r0, r3
 800265e:	f001 fe27 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002668:	f7fe f96c 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800266c:	4b63      	ldr	r3, [pc, #396]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	4a62      	ldr	r2, [pc, #392]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	4a5c      	ldr	r2, [pc, #368]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800269c:	230c      	movs	r3, #12
 800269e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80026ac:	230c      	movs	r3, #12
 80026ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f000 fe5d 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026be:	e097      	b.n	80027f0 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a4e      	ldr	r2, [pc, #312]	; (8002800 <HAL_UART_MspInit+0x1e0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	f040 8092 	bne.w	80027f0 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 fde9 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80026e4:	f7fe f92e 	bl	8000944 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e8:	4b44      	ldr	r3, [pc, #272]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	4a43      	ldr	r2, [pc, #268]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 80026ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f2:	6613      	str	r3, [r2, #96]	; 0x60
 80026f4:	4b41      	ldr	r3, [pc, #260]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002700:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_UART_MspInit+0x1dc>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002718:	2330      	movs	r3, #48	; 0x30
 800271a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002720:	2301      	movs	r3, #1
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002728:	2307      	movs	r3, #7
 800272a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002730:	4619      	mov	r1, r3
 8002732:	4834      	ldr	r0, [pc, #208]	; (8002804 <HAL_UART_MspInit+0x1e4>)
 8002734:	f000 fe20 	bl	8003378 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <HAL_UART_MspInit+0x1ec>)
 800273c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800273e:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002740:	2218      	movs	r2, #24
 8002742:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002744:	4b30      	ldr	r3, [pc, #192]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 800276a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002770:	4825      	ldr	r0, [pc, #148]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002772:	f000 facf 	bl	8002d14 <HAL_DMA_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_UART_MspInit+0x160>
      Error_Handler();
 800277c:	f7fe f8e2 	bl	8000944 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002784:	67da      	str	r2, [r3, #124]	; 0x7c
 8002786:	4a20      	ldr	r2, [pc, #128]	; (8002808 <HAL_UART_MspInit+0x1e8>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 800278e:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_UART_MspInit+0x1f4>)
 8002790:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 8002794:	2219      	movs	r2, #25
 8002796:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 800279a:	2210      	movs	r2, #16
 800279c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027c4:	4812      	ldr	r0, [pc, #72]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027c6:	f000 faa5 	bl	8002d14 <HAL_DMA_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 80027d0:	f7fe f8b8 	bl	8000944 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027d8:	679a      	str	r2, [r3, #120]	; 0x78
 80027da:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <HAL_UART_MspInit+0x1f0>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	2025      	movs	r0, #37	; 0x25
 80027e6:	f000 fa60 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ea:	2025      	movs	r0, #37	; 0x25
 80027ec:	f000 fa77 	bl	8002cde <HAL_NVIC_EnableIRQ>
}
 80027f0:	bf00      	nop
 80027f2:	3770      	adds	r7, #112	; 0x70
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40008000 	.word	0x40008000
 80027fc:	40021000 	.word	0x40021000
 8002800:	40013800 	.word	0x40013800
 8002804:	48000800 	.word	0x48000800
 8002808:	200001b0 	.word	0x200001b0
 800280c:	40020008 	.word	0x40020008
 8002810:	20000210 	.word	0x20000210
 8002814:	4002001c 	.word	0x4002001c

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002864:	f000 f906 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <DMA1_Channel1_IRQHandler+0x10>)
 8002872:	f000 fc32 	bl	80030da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200001b0 	.word	0x200001b0

08002880 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <DMA1_Channel2_IRQHandler+0x10>)
 8002886:	f000 fc28 	bl	80030da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000210 	.word	0x20000210

08002894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <USART1_IRQHandler+0x10>)
 800289a:	f002 f831 	bl	8004900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000120 	.word	0x20000120

080028a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	return 1;
 80028ac:	2301      	movs	r3, #1
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_kill>:

int _kill(int pid, int sig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028c2:	f003 fbf9 	bl	80060b8 <__errno>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2216      	movs	r2, #22
 80028ca:	601a      	str	r2, [r3, #0]
	return -1;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_exit>:

void _exit (int status)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ffe7 	bl	80028b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028ea:	e7fe      	b.n	80028ea <_exit+0x12>

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f003 fbcc 	bl	80060b8 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20008000 	.word	0x20008000
 800294c:	00000400 	.word	0x00000400
 8002950:	20000bf0 	.word	0x20000bf0
 8002954:	20000c08 	.word	0x20000c08

08002958 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <SystemInit+0x20>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <SystemInit+0x20>)
 8002964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800297e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002982:	490e      	ldr	r1, [pc, #56]	; (80029bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <LoopForever+0xe>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002998:	4c0b      	ldr	r4, [pc, #44]	; (80029c8 <LoopForever+0x16>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029a6:	f7ff ffd7 	bl	8002958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f003 fb8b 	bl	80060c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ae:	f7fd fe3d 	bl	800062c <main>

080029b2 <LoopForever>:

LoopForever:
    b LoopForever
 80029b2:	e7fe      	b.n	80029b2 <LoopForever>
  ldr   r0, =_estack
 80029b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80029c0:	08006d84 	.word	0x08006d84
  ldr r2, =_sbss
 80029c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80029c8:	20000c08 	.word	0x20000c08

080029cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC1_2_IRQHandler>

080029ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 f95b 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f80e 	bl	8002a00 <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	71fb      	strb	r3, [r7, #7]
 80029ee:	e001      	b.n	80029f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029f0:	f7ff fdf2 	bl	80025d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f4:	79fb      	ldrb	r3, [r7, #7]

}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_InitTick+0x68>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d022      	beq.n	8002a5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_InitTick+0x6c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_InitTick+0x68>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f966 	bl	8002cfa <HAL_SYSTICK_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10f      	bne.n	8002a54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	d809      	bhi.n	8002a4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a42:	f000 f932 	bl	8002caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_InitTick+0x70>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e007      	b.n	8002a5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e004      	b.n	8002a5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e001      	b.n	8002a5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000008 	.word	0x20000008
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_IncTick+0x1c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_IncTick+0x1c>)
 8002a84:	6013      	str	r3, [r2, #0]
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	20000bf4 	.word	0x20000bf4
 8002a94:	20000008 	.word	0x20000008

08002a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_GetTick+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000bf4 	.word	0x20000bf4

08002ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff ffee 	bl	8002a98 <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d004      	beq.n	8002ad4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_Delay+0x40>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad4:	bf00      	nop
 8002ad6:	f7ff ffdf 	bl	8002a98 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d8f7      	bhi.n	8002ad6 <HAL_Delay+0x26>
  {
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000008 	.word	0x20000008

08002af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	; (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	; (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff8e 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff29 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff40 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff90 	bl	8002be8 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5f 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff33 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa4 	bl	8002c50 <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e08d      	b.n	8002e42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_DMA_Init+0x138>)
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d80f      	bhi.n	8002d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_DMA_Init+0x13c>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a45      	ldr	r2, [pc, #276]	; (8002e54 <HAL_DMA_Init+0x140>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <HAL_DMA_Init+0x144>)
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d50:	e00e      	b.n	8002d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <HAL_DMA_Init+0x148>)
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a3d      	ldr	r2, [pc, #244]	; (8002e54 <HAL_DMA_Init+0x140>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <HAL_DMA_Init+0x14c>)
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa76 	bl	80032b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd0:	d102      	bne.n	8002dd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_DMA_Init+0x104>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d80c      	bhi.n	8002e18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa96 	bl	8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e008      	b.n	8002e2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40020407 	.word	0x40020407
 8002e50:	bffdfff8 	.word	0xbffdfff8
 8002e54:	cccccccd 	.word	0xcccccccd
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	bffdfbf8 	.word	0xbffdfbf8
 8002e60:	40020400 	.word	0x40020400

08002e64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_DMA_Start_IT+0x20>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e066      	b.n	8002f52 <HAL_DMA_Start_IT+0xee>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d155      	bne.n	8002f44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f9bb 	bl	8003238 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 020e 	orr.w	r2, r2, #14
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e00f      	b.n	8002efc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 020a 	orr.w	r2, r2, #10
 8002efa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e005      	b.n	8002f50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d005      	beq.n	8002f7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2204      	movs	r2, #4
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e037      	b.n	8002fee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 020e 	bic.w	r2, r2, #14
 8002f8c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f003 021f 	and.w	r2, r3, #31
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d00d      	beq.n	8003040 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2204      	movs	r2, #4
 8003028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e047      	b.n	80030d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020e 	bic.w	r2, r2, #14
 800304e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800308c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
    }
  }
  return status;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2204      	movs	r2, #4
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d026      	beq.n	8003154 <HAL_DMA_IRQHandler+0x7a>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d021      	beq.n	8003154 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f003 021f 	and.w	r2, r3, #31
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2104      	movs	r1, #4
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	2b00      	cmp	r3, #0
 8003148:	d071      	beq.n	800322e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003152:	e06c      	b.n	800322e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2202      	movs	r2, #2
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d02e      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d029      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 020a 	bic.w	r2, r2, #10
 800318e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2102      	movs	r1, #2
 80031a6:	fa01 f202 	lsl.w	r2, r1, r2
 80031aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d038      	beq.n	800322e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031c4:	e033      	b.n	800322e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2208      	movs	r2, #8
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d02a      	beq.n	8003230 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d025      	beq.n	8003230 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 020e 	bic.w	r2, r2, #14
 80031f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800322e:	bf00      	nop
 8003230:	bf00      	nop
}
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800324e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003260:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2101      	movs	r1, #1
 8003270:	fa01 f202 	lsl.w	r2, r1, r2
 8003274:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b10      	cmp	r3, #16
 8003284:	d108      	bne.n	8003298 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003296:	e007      	b.n	80032a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d802      	bhi.n	80032ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e001      	b.n	80032d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032d0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	3b08      	subs	r3, #8
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40020407 	.word	0x40020407
 8003320:	40020800 	.word	0x40020800
 8003324:	40020820 	.word	0x40020820
 8003328:	cccccccd 	.word	0xcccccccd
 800332c:	40020880 	.word	0x40020880

08003330 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003352:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3b01      	subs	r3, #1
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	1000823f 	.word	0x1000823f
 8003374:	40020940 	.word	0x40020940

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003386:	e15a      	b.n	800363e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 814c 	beq.w	8003638 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d005      	beq.n	80033b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d130      	bne.n	800341a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ee:	2201      	movs	r2, #1
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0201 	and.w	r2, r3, #1
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b03      	cmp	r3, #3
 8003424:	d017      	beq.n	8003456 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d123      	bne.n	80034aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	08da      	lsrs	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3208      	adds	r2, #8
 800346a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	08da      	lsrs	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3208      	adds	r2, #8
 80034a4:	6939      	ldr	r1, [r7, #16]
 80034a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	2203      	movs	r2, #3
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0203 	and.w	r2, r3, #3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a6 	beq.w	8003638 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ec:	4b5b      	ldr	r3, [pc, #364]	; (800365c <HAL_GPIO_Init+0x2e4>)
 80034ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f0:	4a5a      	ldr	r2, [pc, #360]	; (800365c <HAL_GPIO_Init+0x2e4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6613      	str	r3, [r2, #96]	; 0x60
 80034f8:	4b58      	ldr	r3, [pc, #352]	; (800365c <HAL_GPIO_Init+0x2e4>)
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003504:	4a56      	ldr	r2, [pc, #344]	; (8003660 <HAL_GPIO_Init+0x2e8>)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003510:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800352e:	d01f      	beq.n	8003570 <HAL_GPIO_Init+0x1f8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a4c      	ldr	r2, [pc, #304]	; (8003664 <HAL_GPIO_Init+0x2ec>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d019      	beq.n	800356c <HAL_GPIO_Init+0x1f4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a4b      	ldr	r2, [pc, #300]	; (8003668 <HAL_GPIO_Init+0x2f0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_GPIO_Init+0x1f0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a4a      	ldr	r2, [pc, #296]	; (800366c <HAL_GPIO_Init+0x2f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00d      	beq.n	8003564 <HAL_GPIO_Init+0x1ec>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a49      	ldr	r2, [pc, #292]	; (8003670 <HAL_GPIO_Init+0x2f8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <HAL_GPIO_Init+0x1e8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a48      	ldr	r2, [pc, #288]	; (8003674 <HAL_GPIO_Init+0x2fc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_GPIO_Init+0x1e4>
 8003558:	2305      	movs	r3, #5
 800355a:	e00a      	b.n	8003572 <HAL_GPIO_Init+0x1fa>
 800355c:	2306      	movs	r3, #6
 800355e:	e008      	b.n	8003572 <HAL_GPIO_Init+0x1fa>
 8003560:	2304      	movs	r3, #4
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x1fa>
 8003564:	2303      	movs	r3, #3
 8003566:	e004      	b.n	8003572 <HAL_GPIO_Init+0x1fa>
 8003568:	2302      	movs	r3, #2
 800356a:	e002      	b.n	8003572 <HAL_GPIO_Init+0x1fa>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_GPIO_Init+0x1fa>
 8003570:	2300      	movs	r3, #0
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	f002 0203 	and.w	r2, r2, #3
 8003578:	0092      	lsls	r2, r2, #2
 800357a:	4093      	lsls	r3, r2
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003582:	4937      	ldr	r1, [pc, #220]	; (8003660 <HAL_GPIO_Init+0x2e8>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_GPIO_Init+0x300>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43db      	mvns	r3, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b4:	4a30      	ldr	r2, [pc, #192]	; (8003678 <HAL_GPIO_Init+0x300>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035ba:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <HAL_GPIO_Init+0x300>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035de:	4a26      	ldr	r2, [pc, #152]	; (8003678 <HAL_GPIO_Init+0x300>)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_GPIO_Init+0x300>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_GPIO_Init+0x300>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_GPIO_Init+0x300>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003632:	4a11      	ldr	r2, [pc, #68]	; (8003678 <HAL_GPIO_Init+0x300>)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	3301      	adds	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	f47f ae9d 	bne.w	8003388 <HAL_GPIO_Init+0x10>
  }
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40021000 	.word	0x40021000
 8003660:	40010000 	.word	0x40010000
 8003664:	48000400 	.word	0x48000400
 8003668:	48000800 	.word	0x48000800
 800366c:	48000c00 	.word	0x48000c00
 8003670:	48001000 	.word	0x48001000
 8003674:	48001400 	.word	0x48001400
 8003678:	40010400 	.word	0x40010400

0800367c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
 8003688:	4613      	mov	r3, r2
 800368a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800368c:	787b      	ldrb	r3, [r7, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43d9      	mvns	r1, r3
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	400b      	ands	r3, r1
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d141      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ee:	4b4b      	ldr	r3, [pc, #300]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d131      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036fc:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003702:	4a46      	ldr	r2, [pc, #280]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003714:	4a41      	ldr	r2, [pc, #260]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800371c:	4b40      	ldr	r3, [pc, #256]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2232      	movs	r2, #50	; 0x32
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	0c9b      	lsrs	r3, r3, #18
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003732:	e002      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003746:	d102      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f2      	bne.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800374e:	4b33      	ldr	r3, [pc, #204]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d158      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e057      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003760:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003766:	4a2d      	ldr	r2, [pc, #180]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003770:	e04d      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d141      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003786:	d131      	bne.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378e:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a0:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037a8:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2232      	movs	r2, #50	; 0x32
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	0c9b      	lsrs	r3, r3, #18
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037be:	e002      	b.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d2:	d102      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f2      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d112      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e011      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037fc:	e007      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003806:	4a05      	ldr	r2, [pc, #20]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40007000 	.word	0x40007000
 8003820:	20000000 	.word	0x20000000
 8003824:	431bde83 	.word	0x431bde83

08003828 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003836:	6093      	str	r3, [r2, #8]
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e306      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003866:	4b97      	ldr	r3, [pc, #604]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003870:	4b94      	ldr	r3, [pc, #592]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d102      	bne.n	8003886 <HAL_RCC_OscConfig+0x3e>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d002      	beq.n	800388c <HAL_RCC_OscConfig+0x44>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d157      	bne.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e2e1      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x74>
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a84      	ldr	r2, [pc, #528]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7e      	ldr	r2, [pc, #504]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a7b      	ldr	r2, [pc, #492]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038e0:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b75      	ldr	r3, [pc, #468]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a74      	ldr	r2, [pc, #464]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7ff f8ca 	bl	8002a98 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7ff f8c6 	bl	8002a98 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e2a6      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xc0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7ff f8b6 	bl	8002a98 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7ff f8b2 	bl	8002a98 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e292      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003942:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d075      	beq.n	8003a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395e:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003968:	4b56      	ldr	r3, [pc, #344]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x136>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d002      	beq.n	8003984 <HAL_RCC_OscConfig+0x13c>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d11f      	bne.n	80039c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003984:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_OscConfig+0x154>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e265      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	4946      	ldr	r1, [pc, #280]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039b0:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <HAL_RCC_OscConfig+0x280>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff f823 	bl	8002a00 <HAL_InitTick>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d043      	beq.n	8003a48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e251      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d023      	beq.n	8003a14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7ff f85e 	bl	8002a98 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7ff f85a 	bl	8002a98 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e23a      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	492d      	ldr	r1, [pc, #180]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
 8003a12:	e01a      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff f83a 	bl	8002a98 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a28:	f7ff f836 	bl	8002a98 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e216      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1e0>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d041      	beq.n	8003ada <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7ff f813 	bl	8002a98 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a76:	f7ff f80f 	bl	8002a98 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1ef      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ef      	beq.n	8003a76 <HAL_RCC_OscConfig+0x22e>
 8003a96:	e020      	b.n	8003ada <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fff6 	bl	8002a98 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aae:	e00d      	b.n	8003acc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fff2 	bl	8002a98 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d906      	bls.n	8003acc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e1d2      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003acc:	4b8c      	ldr	r3, [pc, #560]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ea      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80a6 	beq.w	8003c34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aec:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_OscConfig+0x2b4>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x2b6>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	4a7e      	ldr	r2, [pc, #504]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b0e:	4b7c      	ldr	r3, [pc, #496]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1e:	4b79      	ldr	r3, [pc, #484]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fe ffaf 	bl	8002a98 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fe ffab 	bl	8002a98 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e18b      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b50:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d108      	bne.n	8003b76 <HAL_RCC_OscConfig+0x32e>
 8003b64:	4b66      	ldr	r3, [pc, #408]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	4a65      	ldr	r2, [pc, #404]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b74:	e024      	b.n	8003bc0 <HAL_RCC_OscConfig+0x378>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d110      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b7e:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b8e:	4b5c      	ldr	r3, [pc, #368]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	4a5a      	ldr	r2, [pc, #360]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b9e:	e00f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x378>
 8003ba0:	4b57      	ldr	r3, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	4a56      	ldr	r2, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	4a52      	ldr	r2, [pc, #328]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d016      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fe ff66 	bl	8002a98 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7fe ff62 	bl	8002a98 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e140      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ed      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x388>
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fe ff4f 	bl	8002a98 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe ff4b 	bl	8002a98 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e129      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c14:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1ed      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	4a34      	ldr	r2, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03c      	beq.n	8003cba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c48:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fe ff1e 	bl	8002a98 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c60:	f7fe ff1a 	bl	8002a98 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0fa      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c72:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ef      	beq.n	8003c60 <HAL_RCC_OscConfig+0x418>
 8003c80:	e01b      	b.n	8003cba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c82:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe ff01 	bl	8002a98 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c9a:	f7fe fefd 	bl	8002a98 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0dd      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ef      	bne.n	8003c9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80d1 	beq.w	8003e66 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	f000 808b 	beq.w	8003de8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d15e      	bne.n	8003d98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fe fed7 	bl	8002a98 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cec:	e00c      	b.n	8003d08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cee:	f7fe fed3 	bl	8002a98 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d905      	bls.n	8003d08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0b3      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d08:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ec      	bne.n	8003cee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d14:	4b56      	ldr	r3, [pc, #344]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <HAL_RCC_OscConfig+0x62c>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6a11      	ldr	r1, [r2, #32]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d24:	3a01      	subs	r2, #1
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d2e:	0212      	lsls	r2, r2, #8
 8003d30:	4311      	orrs	r1, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d36:	0852      	lsrs	r2, r2, #1
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	0552      	lsls	r2, r2, #21
 8003d3c:	4311      	orrs	r1, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0652      	lsls	r2, r2, #25
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d4e:	06d2      	lsls	r2, r2, #27
 8003d50:	430a      	orrs	r2, r1
 8003d52:	4947      	ldr	r1, [pc, #284]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d58:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a44      	ldr	r2, [pc, #272]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d64:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a41      	ldr	r2, [pc, #260]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fe92 	bl	8002a98 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe fe8e 	bl	8002a98 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e06e      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x530>
 8003d96:	e066      	b.n	8003e66 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a34      	ldr	r2, [pc, #208]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003da4:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a31      	ldr	r2, [pc, #196]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003db0:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a2e      	ldr	r2, [pc, #184]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003db6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fe6a 	bl	8002a98 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fe66 	bl	8002a98 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e046      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dda:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x580>
 8003de6:	e03e      	b.n	8003e66 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e039      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HAL_RCC_OscConfig+0x628>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d12c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	3b01      	subs	r3, #1
 8003e14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d123      	bne.n	8003e62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d11b      	bne.n	8003e62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d113      	bne.n	8003e62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	3b01      	subs	r3, #1
 8003e48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	019f800c 	.word	0x019f800c

08003e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e11e      	b.n	80040ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e90:	4b91      	ldr	r3, [pc, #580]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d910      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b8e      	ldr	r3, [pc, #568]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 020f 	bic.w	r2, r3, #15
 8003ea6:	498c      	ldr	r1, [pc, #560]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b8a      	ldr	r3, [pc, #552]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e106      	b.n	80040ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d073      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d129      	bne.n	8003f28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed4:	4b81      	ldr	r3, [pc, #516]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0f4      	b.n	80040ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ee4:	f000 f99e 	bl	8004224 <RCC_GetSysClockFreqFromPLLSource>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <HAL_RCC_ClockConfig+0x268>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d93f      	bls.n	8003f72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ef2:	4b7a      	ldr	r3, [pc, #488]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d033      	beq.n	8003f72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d12f      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f12:	4b72      	ldr	r3, [pc, #456]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f1a:	4a70      	ldr	r2, [pc, #448]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	e024      	b.n	8003f72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f30:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0c6      	b.n	80040ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f40:	4b66      	ldr	r3, [pc, #408]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0be      	b.n	80040ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f50:	f000 f8ce 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4a61      	ldr	r2, [pc, #388]	; (80040e0 <HAL_RCC_ClockConfig+0x268>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d909      	bls.n	8003f72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f66:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4957      	ldr	r1, [pc, #348]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f84:	f7fe fd88 	bl	8002a98 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fe fd84 	bl	8002a98 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e095      	b.n	80040ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b4e      	ldr	r3, [pc, #312]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a42      	ldr	r2, [pc, #264]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003fe4:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fec:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b39      	ldr	r3, [pc, #228]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4936      	ldr	r1, [pc, #216]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
 8004006:	e008      	b.n	800401a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d105      	bne.n	800401a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800400e:	4b33      	ldr	r3, [pc, #204]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4a32      	ldr	r2, [pc, #200]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8004014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004018:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d21d      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 020f 	bic.w	r2, r3, #15
 8004030:	4929      	ldr	r1, [pc, #164]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004038:	f7fe fd2e 	bl	8002a98 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fe fd2a 	bl	8002a98 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e03b      	b.n	80040ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCC_ClockConfig+0x260>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d1ed      	bne.n	8004040 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4917      	ldr	r1, [pc, #92]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490f      	ldr	r1, [pc, #60]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040a2:	f000 f825 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <HAL_RCC_ClockConfig+0x264>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490c      	ldr	r1, [pc, #48]	; (80040e4 <HAL_RCC_ClockConfig+0x26c>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <HAL_RCC_ClockConfig+0x270>)
 80040c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_ClockConfig+0x274>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fc9a 	bl	8002a00 <HAL_InitTick>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40022000 	.word	0x40022000
 80040dc:	40021000 	.word	0x40021000
 80040e0:	04c4b400 	.word	0x04c4b400
 80040e4:	08006cfc 	.word	0x08006cfc
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d102      	bne.n	8004108 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004102:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e047      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d102      	bne.n	800411a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	e03e      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d136      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	3301      	adds	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d10c      	bne.n	800415e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004144:	4a1a      	ldr	r2, [pc, #104]	; (80041b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800414e:	68d2      	ldr	r2, [r2, #12]
 8004150:	0a12      	lsrs	r2, r2, #8
 8004152:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	617b      	str	r3, [r7, #20]
      break;
 800415c:	e00c      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004168:	68d2      	ldr	r2, [r2, #12]
 800416a:	0a12      	lsrs	r2, r2, #8
 800416c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
      break;
 8004176:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	0e5b      	lsrs	r3, r3, #25
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e001      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004198:	693b      	ldr	r3, [r7, #16]
}
 800419a:	4618      	mov	r0, r3
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	016e3600 	.word	0x016e3600

080041b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000000 	.word	0x20000000

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041d0:	f7ff fff0 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4904      	ldr	r1, [pc, #16]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000
 80041f4:	08006d0c 	.word	0x08006d0c

080041f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041fc:	f7ff ffda 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	0adb      	lsrs	r3, r3, #11
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4904      	ldr	r1, [pc, #16]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	08006d0c 	.word	0x08006d0c

08004224 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d10c      	bne.n	8004262 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004248:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004252:	68d2      	ldr	r2, [r2, #12]
 8004254:	0a12      	lsrs	r2, r2, #8
 8004256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	617b      	str	r3, [r7, #20]
    break;
 8004260:	e00c      	b.n	800427c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	0a12      	lsrs	r2, r2, #8
 8004270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
    break;
 800427a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0e5b      	lsrs	r3, r3, #25
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	3301      	adds	r3, #1
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004296:	687b      	ldr	r3, [r7, #4]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40021000 	.word	0x40021000
 80042a8:	016e3600 	.word	0x016e3600
 80042ac:	00f42400 	.word	0x00f42400

080042b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042b8:	2300      	movs	r3, #0
 80042ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042bc:	2300      	movs	r3, #0
 80042be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8098 	beq.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ce:	2300      	movs	r3, #0
 80042d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d2:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10d      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042de:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	4a3f      	ldr	r2, [pc, #252]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e8:	6593      	str	r3, [r2, #88]	; 0x58
 80042ea:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f6:	2301      	movs	r3, #1
 80042f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004304:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004306:	f7fe fbc7 	bl	8002a98 <HAL_GetTick>
 800430a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800430c:	e009      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430e:	f7fe fbc3 	bl	8002a98 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d902      	bls.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	74fb      	strb	r3, [r7, #19]
        break;
 8004320:	e005      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004322:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0ef      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d159      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004334:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01e      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	d019      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004350:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800435c:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800436c:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fe fb83 	bl	8002a98 <HAL_GetTick>
 8004392:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004394:	e00b      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fe fb7f 	bl	8002a98 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d902      	bls.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	74fb      	strb	r3, [r7, #19]
            break;
 80043ac:	e006      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ec      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4903      	ldr	r1, [pc, #12]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	74bb      	strb	r3, [r7, #18]
 80043de:	e005      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ec:	7c7b      	ldrb	r3, [r7, #17]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f2:	4ba6      	ldr	r3, [pc, #664]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	4aa5      	ldr	r2, [pc, #660]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800440a:	4ba0      	ldr	r3, [pc, #640]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f023 0203 	bic.w	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	499c      	ldr	r1, [pc, #624]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800442c:	4b97      	ldr	r3, [pc, #604]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f023 020c 	bic.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4994      	ldr	r1, [pc, #592]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800444e:	4b8f      	ldr	r3, [pc, #572]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	498b      	ldr	r1, [pc, #556]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004470:	4b86      	ldr	r3, [pc, #536]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	4983      	ldr	r1, [pc, #524]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004492:	4b7e      	ldr	r3, [pc, #504]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	497a      	ldr	r1, [pc, #488]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044b4:	4b75      	ldr	r3, [pc, #468]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	4972      	ldr	r1, [pc, #456]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044d6:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4969      	ldr	r1, [pc, #420]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044f8:	4b64      	ldr	r3, [pc, #400]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	4961      	ldr	r1, [pc, #388]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451a:	4b5c      	ldr	r3, [pc, #368]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	4958      	ldr	r1, [pc, #352]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800453c:	4b53      	ldr	r3, [pc, #332]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	4950      	ldr	r1, [pc, #320]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d105      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800455c:	4b4b      	ldr	r3, [pc, #300]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a4a      	ldr	r2, [pc, #296]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004566:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004574:	4b45      	ldr	r3, [pc, #276]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	4942      	ldr	r1, [pc, #264]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004594:	4b3d      	ldr	r3, [pc, #244]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a3c      	ldr	r2, [pc, #240]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d015      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045ac:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	4934      	ldr	r1, [pc, #208]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045cc:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a2e      	ldr	r2, [pc, #184]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045e4:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	4926      	ldr	r1, [pc, #152]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004602:	d105      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	4b21      	ldr	r3, [pc, #132]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	4918      	ldr	r1, [pc, #96]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463a:	d105      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463c:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004646:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004654:	4b0d      	ldr	r3, [pc, #52]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	490a      	ldr	r1, [pc, #40]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004680:	7cbb      	ldrb	r3, [r7, #18]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40021000 	.word	0x40021000

08004690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e042      	b.n	8004728 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fd ffb3 	bl	8002620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2224      	movs	r2, #36	; 0x24
 80046be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fc56 	bl	8004f84 <UART_SetConfig>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e022      	b.n	8004728 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 ff16 	bl	800551c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800470e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 ff9d 	bl	8005660 <UART_CheckIdleState>
 8004726:	4603      	mov	r3, r0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004744:	2b20      	cmp	r3, #32
 8004746:	d17a      	bne.n	800483e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_UART_Transmit_DMA+0x24>
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e073      	b.n	8004840 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_UART_Transmit_DMA+0x36>
 8004762:	2302      	movs	r3, #2
 8004764:	e06c      	b.n	8004840 <HAL_UART_Transmit_DMA+0x110>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2221      	movs	r2, #33	; 0x21
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02c      	beq.n	80047f6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a0:	4a29      	ldr	r2, [pc, #164]	; (8004848 <HAL_UART_Transmit_DMA+0x118>)
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a8:	4a28      	ldr	r2, [pc, #160]	; (800484c <HAL_UART_Transmit_DMA+0x11c>)
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b0:	4a27      	ldr	r2, [pc, #156]	; (8004850 <HAL_UART_Transmit_DMA+0x120>)
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b8:	2200      	movs	r2, #0
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	4619      	mov	r1, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3328      	adds	r3, #40	; 0x28
 80047cc:	461a      	mov	r2, r3
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	f7fe fb48 	bl	8002e64 <HAL_DMA_Start_IT>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2210      	movs	r2, #16
 80047de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e024      	b.n	8004840 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	613b      	str	r3, [r7, #16]
   return(result);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	623a      	str	r2, [r7, #32]
 8004828:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	69f9      	ldr	r1, [r7, #28]
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	61bb      	str	r3, [r7, #24]
   return(result);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3728      	adds	r7, #40	; 0x28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	08005b27 	.word	0x08005b27
 800484c:	08005bc1 	.word	0x08005bc1
 8004850:	08005d3b 	.word	0x08005d3b

08004854 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	2b20      	cmp	r3, #32
 800486a:	d142      	bne.n	80048f2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_UART_Receive_DMA+0x24>
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e03b      	b.n	80048f4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_UART_Receive_DMA+0x36>
 8004886:	2302      	movs	r3, #2
 8004888:	e034      	b.n	80048f4 <HAL_UART_Receive_DMA+0xa0>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_UART_Receive_DMA+0xa8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d01f      	beq.n	80048e2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d018      	beq.n	80048e2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	613b      	str	r3, [r7, #16]
   return(result);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	69f9      	ldr	r1, [r7, #28]
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	61bb      	str	r3, [r7, #24]
   return(result);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e6      	bne.n	80048b0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	461a      	mov	r2, r3
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 ffcd 	bl	8005888 <UART_Start_Receive_DMA>
 80048ee:	4603      	mov	r3, r0
 80048f0:	e000      	b.n	80048f4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40008000 	.word	0x40008000

08004900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b0ba      	sub	sp, #232	; 0xe8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800492a:	f640 030f 	movw	r3, #2063	; 0x80f
 800492e:	4013      	ands	r3, r2
 8004930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d11b      	bne.n	8004974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 82d6 	beq.w	8004f16 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	4798      	blx	r3
      }
      return;
 8004972:	e2d0      	b.n	8004f16 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 811f 	beq.w	8004bbc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800497e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004982:	4b8b      	ldr	r3, [pc, #556]	; (8004bb0 <HAL_UART_IRQHandler+0x2b0>)
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800498a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800498e:	4b89      	ldr	r3, [pc, #548]	; (8004bb4 <HAL_UART_IRQHandler+0x2b4>)
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8112 	beq.w	8004bbc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d011      	beq.n	80049c8 <HAL_UART_IRQHandler+0xc8>
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2201      	movs	r2, #1
 80049b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d011      	beq.n	80049f8 <HAL_UART_IRQHandler+0xf8>
 80049d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2202      	movs	r2, #2
 80049e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d011      	beq.n	8004a28 <HAL_UART_IRQHandler+0x128>
 8004a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2204      	movs	r2, #4
 8004a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1e:	f043 0202 	orr.w	r2, r3, #2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d017      	beq.n	8004a64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a44:	4b5a      	ldr	r3, [pc, #360]	; (8004bb0 <HAL_UART_IRQHandler+0x2b0>)
 8004a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2208      	movs	r2, #8
 8004a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5a:	f043 0208 	orr.w	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d012      	beq.n	8004a96 <HAL_UART_IRQHandler+0x196>
 8004a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00c      	beq.n	8004a96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 823c 	beq.w	8004f1a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d013      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004adc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d005      	beq.n	8004afa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d04f      	beq.n	8004b9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 ffad 	bl	8005a5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d141      	bne.n	8004b92 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3308      	adds	r3, #8
 8004b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b4a:	e841 2300 	strex	r3, r2, [r1]
 8004b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1d9      	bne.n	8004b0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d013      	beq.n	8004b8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b66:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <HAL_UART_IRQHandler+0x2b8>)
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe fa4c 	bl	800300c <HAL_DMA_Abort_IT>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d017      	beq.n	8004baa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004b84:	4610      	mov	r0, r2
 8004b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	e00f      	b.n	8004baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9e4 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e00b      	b.n	8004baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9e0 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	e007      	b.n	8004baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9dc 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004ba8:	e1b7      	b.n	8004f1a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004baa:	bf00      	nop
    return;
 8004bac:	e1b5      	b.n	8004f1a <HAL_UART_IRQHandler+0x61a>
 8004bae:	bf00      	nop
 8004bb0:	10000001 	.word	0x10000001
 8004bb4:	04000120 	.word	0x04000120
 8004bb8:	08005dbb 	.word	0x08005dbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 814a 	bne.w	8004e5a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8143 	beq.w	8004e5a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 813c 	beq.w	8004e5a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2210      	movs	r2, #16
 8004be8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	f040 80b5 	bne.w	8004d64 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8187 	beq.w	8004f1e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	f080 817f 	bcs.w	8004f1e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f040 8086 	bne.w	8004d48 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1da      	bne.n	8004c3c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e1      	bne.n	8004c86 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e3      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d18:	f023 0310 	bic.w	r3, r3, #16
 8004d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e4      	bne.n	8004d08 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe f909 	bl	8002f5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f905 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d62:	e0dc      	b.n	8004f1e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80ce 	beq.w	8004f22 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80c9 	beq.w	8004f22 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004db2:	647b      	str	r3, [r7, #68]	; 0x44
 8004db4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e4      	bne.n	8004d90 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3308      	adds	r3, #8
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dee:	633a      	str	r2, [r7, #48]	; 0x30
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e1      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	69b9      	ldr	r1, [r7, #24]
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	617b      	str	r3, [r7, #20]
   return(result);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e4      	bne.n	8004e16 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f88a 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e58:	e063      	b.n	8004f22 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00e      	beq.n	8004e84 <HAL_UART_IRQHandler+0x584>
 8004e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 ffdd 	bl	8005e3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e82:	e051      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d014      	beq.n	8004eba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d03a      	beq.n	8004f26 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
    }
    return;
 8004eb8:	e035      	b.n	8004f26 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_UART_IRQHandler+0x5da>
 8004ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 ff87 	bl	8005de6 <UART_EndTransmit_IT>
    return;
 8004ed8:	e026      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_UART_IRQHandler+0x5fa>
 8004ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 ffb6 	bl	8005e64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ef8:	e016      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <HAL_UART_IRQHandler+0x628>
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da0c      	bge.n	8004f28 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 ff9e 	bl	8005e50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f14:	e008      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
      return;
 8004f16:	bf00      	nop
 8004f18:	e006      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
    return;
 8004f1a:	bf00      	nop
 8004f1c:	e004      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
      return;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
      return;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_UART_IRQHandler+0x628>
    return;
 8004f26:	bf00      	nop
  }
}
 8004f28:	37e8      	adds	r7, #232	; 0xe8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f88:	b08c      	sub	sp, #48	; 0x30
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4bab      	ldr	r3, [pc, #684]	; (8005260 <UART_SetConfig+0x2dc>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4aa0      	ldr	r2, [pc, #640]	; (8005264 <UART_SetConfig+0x2e0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fec:	4313      	orrs	r3, r2
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ffa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005004:	430b      	orrs	r3, r1
 8005006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	f023 010f 	bic.w	r1, r3, #15
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a91      	ldr	r2, [pc, #580]	; (8005268 <UART_SetConfig+0x2e4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d125      	bne.n	8005074 <UART_SetConfig+0xf0>
 8005028:	4b90      	ldr	r3, [pc, #576]	; (800526c <UART_SetConfig+0x2e8>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b03      	cmp	r3, #3
 8005034:	d81a      	bhi.n	800506c <UART_SetConfig+0xe8>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0xb8>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	0800504d 	.word	0x0800504d
 8005040:	0800505d 	.word	0x0800505d
 8005044:	08005055 	.word	0x08005055
 8005048:	08005065 	.word	0x08005065
 800504c:	2301      	movs	r3, #1
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005052:	e0d6      	b.n	8005202 <UART_SetConfig+0x27e>
 8005054:	2302      	movs	r3, #2
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505a:	e0d2      	b.n	8005202 <UART_SetConfig+0x27e>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005062:	e0ce      	b.n	8005202 <UART_SetConfig+0x27e>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506a:	e0ca      	b.n	8005202 <UART_SetConfig+0x27e>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005072:	e0c6      	b.n	8005202 <UART_SetConfig+0x27e>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a7d      	ldr	r2, [pc, #500]	; (8005270 <UART_SetConfig+0x2ec>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d138      	bne.n	80050f0 <UART_SetConfig+0x16c>
 800507e:	4b7b      	ldr	r3, [pc, #492]	; (800526c <UART_SetConfig+0x2e8>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b0c      	cmp	r3, #12
 800508a:	d82d      	bhi.n	80050e8 <UART_SetConfig+0x164>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <UART_SetConfig+0x110>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050c9 	.word	0x080050c9
 8005098:	080050e9 	.word	0x080050e9
 800509c:	080050e9 	.word	0x080050e9
 80050a0:	080050e9 	.word	0x080050e9
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050e9 	.word	0x080050e9
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e098      	b.n	8005202 <UART_SetConfig+0x27e>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d6:	e094      	b.n	8005202 <UART_SetConfig+0x27e>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050de:	e090      	b.n	8005202 <UART_SetConfig+0x27e>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e08c      	b.n	8005202 <UART_SetConfig+0x27e>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e088      	b.n	8005202 <UART_SetConfig+0x27e>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5f      	ldr	r2, [pc, #380]	; (8005274 <UART_SetConfig+0x2f0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d125      	bne.n	8005146 <UART_SetConfig+0x1c2>
 80050fa:	4b5c      	ldr	r3, [pc, #368]	; (800526c <UART_SetConfig+0x2e8>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d016      	beq.n	8005136 <UART_SetConfig+0x1b2>
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d818      	bhi.n	800513e <UART_SetConfig+0x1ba>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d00a      	beq.n	8005126 <UART_SetConfig+0x1a2>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d814      	bhi.n	800513e <UART_SetConfig+0x1ba>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <UART_SetConfig+0x19a>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d008      	beq.n	800512e <UART_SetConfig+0x1aa>
 800511c:	e00f      	b.n	800513e <UART_SetConfig+0x1ba>
 800511e:	2300      	movs	r3, #0
 8005120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005124:	e06d      	b.n	8005202 <UART_SetConfig+0x27e>
 8005126:	2302      	movs	r3, #2
 8005128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512c:	e069      	b.n	8005202 <UART_SetConfig+0x27e>
 800512e:	2304      	movs	r3, #4
 8005130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005134:	e065      	b.n	8005202 <UART_SetConfig+0x27e>
 8005136:	2308      	movs	r3, #8
 8005138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513c:	e061      	b.n	8005202 <UART_SetConfig+0x27e>
 800513e:	2310      	movs	r3, #16
 8005140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005144:	e05d      	b.n	8005202 <UART_SetConfig+0x27e>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4b      	ldr	r2, [pc, #300]	; (8005278 <UART_SetConfig+0x2f4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d125      	bne.n	800519c <UART_SetConfig+0x218>
 8005150:	4b46      	ldr	r3, [pc, #280]	; (800526c <UART_SetConfig+0x2e8>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800515a:	2bc0      	cmp	r3, #192	; 0xc0
 800515c:	d016      	beq.n	800518c <UART_SetConfig+0x208>
 800515e:	2bc0      	cmp	r3, #192	; 0xc0
 8005160:	d818      	bhi.n	8005194 <UART_SetConfig+0x210>
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d00a      	beq.n	800517c <UART_SetConfig+0x1f8>
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d814      	bhi.n	8005194 <UART_SetConfig+0x210>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <UART_SetConfig+0x1f0>
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d008      	beq.n	8005184 <UART_SetConfig+0x200>
 8005172:	e00f      	b.n	8005194 <UART_SetConfig+0x210>
 8005174:	2300      	movs	r3, #0
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517a:	e042      	b.n	8005202 <UART_SetConfig+0x27e>
 800517c:	2302      	movs	r3, #2
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005182:	e03e      	b.n	8005202 <UART_SetConfig+0x27e>
 8005184:	2304      	movs	r3, #4
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518a:	e03a      	b.n	8005202 <UART_SetConfig+0x27e>
 800518c:	2308      	movs	r3, #8
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e036      	b.n	8005202 <UART_SetConfig+0x27e>
 8005194:	2310      	movs	r3, #16
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e032      	b.n	8005202 <UART_SetConfig+0x27e>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a30      	ldr	r2, [pc, #192]	; (8005264 <UART_SetConfig+0x2e0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d12a      	bne.n	80051fc <UART_SetConfig+0x278>
 80051a6:	4b31      	ldr	r3, [pc, #196]	; (800526c <UART_SetConfig+0x2e8>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b4:	d01a      	beq.n	80051ec <UART_SetConfig+0x268>
 80051b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ba:	d81b      	bhi.n	80051f4 <UART_SetConfig+0x270>
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c0:	d00c      	beq.n	80051dc <UART_SetConfig+0x258>
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d815      	bhi.n	80051f4 <UART_SetConfig+0x270>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <UART_SetConfig+0x250>
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d0:	d008      	beq.n	80051e4 <UART_SetConfig+0x260>
 80051d2:	e00f      	b.n	80051f4 <UART_SetConfig+0x270>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051da:	e012      	b.n	8005202 <UART_SetConfig+0x27e>
 80051dc:	2302      	movs	r3, #2
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e2:	e00e      	b.n	8005202 <UART_SetConfig+0x27e>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ea:	e00a      	b.n	8005202 <UART_SetConfig+0x27e>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f2:	e006      	b.n	8005202 <UART_SetConfig+0x27e>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fa:	e002      	b.n	8005202 <UART_SetConfig+0x27e>
 80051fc:	2310      	movs	r3, #16
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a17      	ldr	r2, [pc, #92]	; (8005264 <UART_SetConfig+0x2e0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	f040 80a8 	bne.w	800535e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800520e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005212:	2b08      	cmp	r3, #8
 8005214:	d834      	bhi.n	8005280 <UART_SetConfig+0x2fc>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0x298>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005241 	.word	0x08005241
 8005220:	08005281 	.word	0x08005281
 8005224:	08005249 	.word	0x08005249
 8005228:	08005281 	.word	0x08005281
 800522c:	0800524f 	.word	0x0800524f
 8005230:	08005281 	.word	0x08005281
 8005234:	08005281 	.word	0x08005281
 8005238:	08005281 	.word	0x08005281
 800523c:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005240:	f7fe ffc4 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8005244:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005246:	e021      	b.n	800528c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <UART_SetConfig+0x2f8>)
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800524c:	e01e      	b.n	800528c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524e:	f7fe ff4f 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005254:	e01a      	b.n	800528c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800525c:	e016      	b.n	800528c <UART_SetConfig+0x308>
 800525e:	bf00      	nop
 8005260:	cfff69f3 	.word	0xcfff69f3
 8005264:	40008000 	.word	0x40008000
 8005268:	40013800 	.word	0x40013800
 800526c:	40021000 	.word	0x40021000
 8005270:	40004400 	.word	0x40004400
 8005274:	40004800 	.word	0x40004800
 8005278:	40004c00 	.word	0x40004c00
 800527c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800528a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 812a 	beq.w	80054e8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	4a9e      	ldr	r2, [pc, #632]	; (8005514 <UART_SetConfig+0x590>)
 800529a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800529e:	461a      	mov	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4613      	mov	r3, r2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4413      	add	r3, r2
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d305      	bcc.n	80052c4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d903      	bls.n	80052cc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052ca:	e10d      	b.n	80054e8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	2200      	movs	r2, #0
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	60fa      	str	r2, [r7, #12]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	4a8e      	ldr	r2, [pc, #568]	; (8005514 <UART_SetConfig+0x590>)
 80052da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2200      	movs	r2, #0
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052ee:	f7fa ffef 	bl	80002d0 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	020b      	lsls	r3, r1, #8
 8005304:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005308:	0202      	lsls	r2, r0, #8
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	6849      	ldr	r1, [r1, #4]
 800530e:	0849      	lsrs	r1, r1, #1
 8005310:	2000      	movs	r0, #0
 8005312:	460c      	mov	r4, r1
 8005314:	4605      	mov	r5, r0
 8005316:	eb12 0804 	adds.w	r8, r2, r4
 800531a:	eb43 0905 	adc.w	r9, r3, r5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	469a      	mov	sl, r3
 8005326:	4693      	mov	fp, r2
 8005328:	4652      	mov	r2, sl
 800532a:	465b      	mov	r3, fp
 800532c:	4640      	mov	r0, r8
 800532e:	4649      	mov	r1, r9
 8005330:	f7fa ffce 	bl	80002d0 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005342:	d308      	bcc.n	8005356 <UART_SetConfig+0x3d2>
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534a:	d204      	bcs.n	8005356 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	e0c8      	b.n	80054e8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800535c:	e0c4      	b.n	80054e8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005366:	d167      	bne.n	8005438 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800536c:	2b08      	cmp	r3, #8
 800536e:	d828      	bhi.n	80053c2 <UART_SetConfig+0x43e>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x3f4>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053b3 	.word	0x080053b3
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053c3 	.word	0x080053c3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fe ff16 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053a2:	e014      	b.n	80053ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fe ff28 	bl	80041f8 <HAL_RCC_GetPCLK2Freq>
 80053a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053aa:	e010      	b.n	80053ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b5a      	ldr	r3, [pc, #360]	; (8005518 <UART_SetConfig+0x594>)
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053b0:	e00d      	b.n	80053ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fe fe9d 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80053b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053b8:	e009      	b.n	80053ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053c0:	e005      	b.n	80053ce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8089 	beq.w	80054e8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	4a4e      	ldr	r2, [pc, #312]	; (8005514 <UART_SetConfig+0x590>)
 80053dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e8:	005a      	lsls	r2, r3, #1
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	441a      	add	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d916      	bls.n	8005430 <UART_SetConfig+0x4ac>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d212      	bcs.n	8005430 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f023 030f 	bic.w	r3, r3, #15
 8005412:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	b29a      	uxth	r2, r3
 8005420:	8bfb      	ldrh	r3, [r7, #30]
 8005422:	4313      	orrs	r3, r2
 8005424:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	8bfa      	ldrh	r2, [r7, #30]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	e05b      	b.n	80054e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005436:	e057      	b.n	80054e8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005438:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800543c:	2b08      	cmp	r3, #8
 800543e:	d828      	bhi.n	8005492 <UART_SetConfig+0x50e>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x4c4>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547d 	.word	0x0800547d
 8005454:	08005493 	.word	0x08005493
 8005458:	08005483 	.word	0x08005483
 800545c:	08005493 	.word	0x08005493
 8005460:	08005493 	.word	0x08005493
 8005464:	08005493 	.word	0x08005493
 8005468:	0800548b 	.word	0x0800548b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fe feae 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8005470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005472:	e014      	b.n	800549e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fe fec0 	bl	80041f8 <HAL_RCC_GetPCLK2Freq>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800547a:	e010      	b.n	800549e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800547c:	4b26      	ldr	r3, [pc, #152]	; (8005518 <UART_SetConfig+0x594>)
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005480:	e00d      	b.n	800549e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005482:	f7fe fe35 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8005486:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005488:	e009      	b.n	800549e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005490:	e005      	b.n	800549e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800549c:	bf00      	nop
    }

    if (pclk != 0U)
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d021      	beq.n	80054e8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <UART_SetConfig+0x590>)
 80054aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	441a      	add	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d909      	bls.n	80054e2 <UART_SetConfig+0x55e>
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	d205      	bcs.n	80054e2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e002      	b.n	80054e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2200      	movs	r2, #0
 80054fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2200      	movs	r2, #0
 8005502:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005504:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005508:	4618      	mov	r0, r3
 800550a:	3730      	adds	r7, #48	; 0x30
 800550c:	46bd      	mov	sp, r7
 800550e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005512:	bf00      	nop
 8005514:	08006d14 	.word	0x08006d14
 8005518:	00f42400 	.word	0x00f42400

0800551c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01a      	beq.n	8005632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800561a:	d10a      	bne.n	8005632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af02      	add	r7, sp, #8
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005670:	f7fd fa12 	bl	8002a98 <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b08      	cmp	r3, #8
 8005682:	d10e      	bne.n	80056a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f82f 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e025      	b.n	80056ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d10e      	bne.n	80056ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f819 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e00f      	b.n	80056ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b09c      	sub	sp, #112	; 0x70
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	4613      	mov	r3, r2
 8005704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005706:	e0a9      	b.n	800585c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	f000 80a5 	beq.w	800585c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fd f9c1 	bl	8002a98 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <UART_WaitOnFlagUntilTimeout+0x32>
 8005722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005724:	2b00      	cmp	r3, #0
 8005726:	d140      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005738:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800573c:	667b      	str	r3, [r7, #100]	; 0x64
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005748:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800574c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e6      	bne.n	8005728 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	663b      	str	r3, [r7, #96]	; 0x60
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800577a:	64ba      	str	r2, [r7, #72]	; 0x48
 800577c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e5      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e069      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d051      	beq.n	800585c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c6:	d149      	bne.n	800585c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
 80057f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e6      	bne.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	613b      	str	r3, [r7, #16]
   return(result);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	66bb      	str	r3, [r7, #104]	; 0x68
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005824:	623a      	str	r2, [r7, #32]
 8005826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	69f9      	ldr	r1, [r7, #28]
 800582a:	6a3a      	ldr	r2, [r7, #32]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	61bb      	str	r3, [r7, #24]
   return(result);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2220      	movs	r2, #32
 800584c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e010      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69da      	ldr	r2, [r3, #28]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4013      	ands	r3, r2
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	429a      	cmp	r2, r3
 8005878:	f43f af46 	beq.w	8005708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3770      	adds	r7, #112	; 0x70
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b096      	sub	sp, #88	; 0x58
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	88fa      	ldrh	r2, [r7, #6]
 80058a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2222      	movs	r2, #34	; 0x22
 80058b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d02c      	beq.n	8005916 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c0:	4a42      	ldr	r2, [pc, #264]	; (80059cc <UART_Start_Receive_DMA+0x144>)
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c8:	4a41      	ldr	r2, [pc, #260]	; (80059d0 <UART_Start_Receive_DMA+0x148>)
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d0:	4a40      	ldr	r2, [pc, #256]	; (80059d4 <UART_Start_Receive_DMA+0x14c>)
 80058d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d8:	2200      	movs	r2, #0
 80058da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	4619      	mov	r1, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ec:	461a      	mov	r2, r3
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	f7fd fab8 	bl	8002e64 <HAL_DMA_Start_IT>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2210      	movs	r2, #16
 80058fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e055      	b.n	80059c2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d018      	beq.n	8005958 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593a:	657b      	str	r3, [r7, #84]	; 0x54
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005944:	64bb      	str	r3, [r7, #72]	; 0x48
 8005946:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800594a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e6      	bne.n	8005926 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3308      	adds	r3, #8
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	653b      	str	r3, [r7, #80]	; 0x50
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3308      	adds	r3, #8
 8005976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005978:	637a      	str	r2, [r7, #52]	; 0x34
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800597e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	613b      	str	r3, [r7, #16]
   return(result);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ac:	623a      	str	r2, [r7, #32]
 80059ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3758      	adds	r7, #88	; 0x58
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	08005bdd 	.word	0x08005bdd
 80059d0:	08005d03 	.word	0x08005d03
 80059d4:	08005d3b 	.word	0x08005d3b

080059d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b08f      	sub	sp, #60	; 0x3c
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a00:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e6      	bne.n	80059e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a32:	61ba      	str	r2, [r7, #24]
 8005a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005a4e:	bf00      	nop
 8005a50:	373c      	adds	r7, #60	; 0x3c
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b095      	sub	sp, #84	; 0x54
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a80:	643b      	str	r3, [r7, #64]	; 0x40
 8005a82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e6      	bne.n	8005a62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	f023 0301 	bic.w	r3, r3, #1
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e3      	bne.n	8005a94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d118      	bne.n	8005b06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6979      	ldr	r1, [r7, #20]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	613b      	str	r3, [r7, #16]
   return(result);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e6      	bne.n	8005ad4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005b1a:	bf00      	nop
 8005b1c:	3754      	adds	r7, #84	; 0x54
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b090      	sub	sp, #64	; 0x40
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d137      	bne.n	8005bb2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3308      	adds	r3, #8
 8005b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b6a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e5      	bne.n	8005b4a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
 8005b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	69b9      	ldr	r1, [r7, #24]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e6      	bne.n	8005b7e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bb0:	e002      	b.n	8005bb8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005bb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005bb4:	f7fb ffb4 	bl	8001b20 <HAL_UART_TxCpltCallback>
}
 8005bb8:	bf00      	nop
 8005bba:	3740      	adds	r7, #64	; 0x40
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff f9ae 	bl	8004f30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b09c      	sub	sp, #112	; 0x70
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d171      	bne.n	8005cdc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	667b      	str	r3, [r7, #100]	; 0x64
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c52:	647a      	str	r2, [r7, #68]	; 0x44
 8005c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	623b      	str	r3, [r7, #32]
   return(result);
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c86:	633a      	str	r2, [r7, #48]	; 0x30
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d118      	bne.n	8005cdc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0310 	bic.w	r3, r3, #16
 8005cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e6      	bne.n	8005caa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d107      	bne.n	8005cf4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cea:	4619      	mov	r1, r3
 8005cec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cee:	f7ff f93d 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cf2:	e002      	b.n	8005cfa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005cf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cf6:	f7fb ff25 	bl	8001b44 <HAL_UART_RxCpltCallback>
}
 8005cfa:	bf00      	nop
 8005cfc:	3770      	adds	r7, #112	; 0x70
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d109      	bne.n	8005d2c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4619      	mov	r1, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff f921 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d2a:	e002      	b.n	8005d32 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff f909 	bl	8004f44 <HAL_UART_RxHalfCpltCallback>
}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d109      	bne.n	8005d7a <UART_DMAError+0x40>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b21      	cmp	r3, #33	; 0x21
 8005d6a:	d106      	bne.n	8005d7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	f7ff fe2f 	bl	80059d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d109      	bne.n	8005d9c <UART_DMAError+0x62>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b22      	cmp	r3, #34	; 0x22
 8005d8c:	d106      	bne.n	8005d9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f7ff fe5f 	bl	8005a5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da2:	f043 0210 	orr.w	r2, r3, #16
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dac:	6978      	ldr	r0, [r7, #20]
 8005dae:	f7ff f8d3 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005db2:	bf00      	nop
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff f8bd 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b088      	sub	sp, #32
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6979      	ldr	r1, [r7, #20]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fb fe76 	bl	8001b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e34:	bf00      	nop
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_UARTEx_DisableFifoMode+0x16>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e027      	b.n	8005ede <HAL_UARTEx_DisableFifoMode+0x66>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2224      	movs	r2, #36	; 0x24
 8005e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e02d      	b.n	8005f5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2224      	movs	r2, #36	; 0x24
 8005f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f850 	bl	8005fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e02d      	b.n	8005fda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2224      	movs	r2, #36	; 0x24
 8005f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0201 	bic.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f812 	bl	8005fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d108      	bne.n	8006006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006004:	e031      	b.n	800606a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006006:	2308      	movs	r3, #8
 8006008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800600a:	2308      	movs	r3, #8
 800600c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	0e5b      	lsrs	r3, r3, #25
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	0f5b      	lsrs	r3, r3, #29
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	7b3a      	ldrb	r2, [r7, #12]
 8006032:	4911      	ldr	r1, [pc, #68]	; (8006078 <UARTEx_SetNbDataToProcess+0x94>)
 8006034:	5c8a      	ldrb	r2, [r1, r2]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800603a:	7b3a      	ldrb	r2, [r7, #12]
 800603c:	490f      	ldr	r1, [pc, #60]	; (800607c <UARTEx_SetNbDataToProcess+0x98>)
 800603e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006040:	fb93 f3f2 	sdiv	r3, r3, r2
 8006044:	b29a      	uxth	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	7b7a      	ldrb	r2, [r7, #13]
 8006050:	4909      	ldr	r1, [pc, #36]	; (8006078 <UARTEx_SetNbDataToProcess+0x94>)
 8006052:	5c8a      	ldrb	r2, [r1, r2]
 8006054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006058:	7b7a      	ldrb	r2, [r7, #13]
 800605a:	4908      	ldr	r1, [pc, #32]	; (800607c <UARTEx_SetNbDataToProcess+0x98>)
 800605c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800605e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	08006d2c 	.word	0x08006d2c
 800607c:	08006d34 	.word	0x08006d34

08006080 <__cxa_pure_virtual>:
 8006080:	b508      	push	{r3, lr}
 8006082:	f000 f80d 	bl	80060a0 <_ZSt9terminatev>

08006086 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006086:	b508      	push	{r3, lr}
 8006088:	4780      	blx	r0
 800608a:	f000 f80e 	bl	80060aa <abort>
	...

08006090 <_ZSt13get_terminatev>:
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <_ZSt13get_terminatev+0xc>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	f3bf 8f5b 	dmb	ish
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	2000000c 	.word	0x2000000c

080060a0 <_ZSt9terminatev>:
 80060a0:	b508      	push	{r3, lr}
 80060a2:	f7ff fff5 	bl	8006090 <_ZSt13get_terminatev>
 80060a6:	f7ff ffee 	bl	8006086 <_ZN10__cxxabiv111__terminateEPFvvE>

080060aa <abort>:
 80060aa:	b508      	push	{r3, lr}
 80060ac:	2006      	movs	r0, #6
 80060ae:	f000 f873 	bl	8006198 <raise>
 80060b2:	2001      	movs	r0, #1
 80060b4:	f7fc fc10 	bl	80028d8 <_exit>

080060b8 <__errno>:
 80060b8:	4b01      	ldr	r3, [pc, #4]	; (80060c0 <__errno+0x8>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000010 	.word	0x20000010

080060c4 <__libc_init_array>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4d0d      	ldr	r5, [pc, #52]	; (80060fc <__libc_init_array+0x38>)
 80060c8:	4c0d      	ldr	r4, [pc, #52]	; (8006100 <__libc_init_array+0x3c>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	2600      	movs	r6, #0
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	d109      	bne.n	80060e8 <__libc_init_array+0x24>
 80060d4:	4d0b      	ldr	r5, [pc, #44]	; (8006104 <__libc_init_array+0x40>)
 80060d6:	4c0c      	ldr	r4, [pc, #48]	; (8006108 <__libc_init_array+0x44>)
 80060d8:	f000 fcec 	bl	8006ab4 <_init>
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	2600      	movs	r6, #0
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d105      	bne.n	80060f2 <__libc_init_array+0x2e>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ec:	4798      	blx	r3
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7ee      	b.n	80060d0 <__libc_init_array+0xc>
 80060f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f6:	4798      	blx	r3
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7f2      	b.n	80060e2 <__libc_init_array+0x1e>
 80060fc:	08006d78 	.word	0x08006d78
 8006100:	08006d78 	.word	0x08006d78
 8006104:	08006d78 	.word	0x08006d78
 8006108:	08006d80 	.word	0x08006d80

0800610c <memcpy>:
 800610c:	440a      	add	r2, r1
 800610e:	4291      	cmp	r1, r2
 8006110:	f100 33ff 	add.w	r3, r0, #4294967295
 8006114:	d100      	bne.n	8006118 <memcpy+0xc>
 8006116:	4770      	bx	lr
 8006118:	b510      	push	{r4, lr}
 800611a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800611e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006122:	4291      	cmp	r1, r2
 8006124:	d1f9      	bne.n	800611a <memcpy+0xe>
 8006126:	bd10      	pop	{r4, pc}

08006128 <memset>:
 8006128:	4402      	add	r2, r0
 800612a:	4603      	mov	r3, r0
 800612c:	4293      	cmp	r3, r2
 800612e:	d100      	bne.n	8006132 <memset+0xa>
 8006130:	4770      	bx	lr
 8006132:	f803 1b01 	strb.w	r1, [r3], #1
 8006136:	e7f9      	b.n	800612c <memset+0x4>

08006138 <realloc>:
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <realloc+0xc>)
 800613a:	460a      	mov	r2, r1
 800613c:	4601      	mov	r1, r0
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	f000 b90e 	b.w	8006360 <_realloc_r>
 8006144:	20000010 	.word	0x20000010

08006148 <_raise_r>:
 8006148:	291f      	cmp	r1, #31
 800614a:	b538      	push	{r3, r4, r5, lr}
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	d904      	bls.n	800615c <_raise_r+0x14>
 8006152:	2316      	movs	r3, #22
 8006154:	6003      	str	r3, [r0, #0]
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800615e:	b112      	cbz	r2, 8006166 <_raise_r+0x1e>
 8006160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006164:	b94b      	cbnz	r3, 800617a <_raise_r+0x32>
 8006166:	4620      	mov	r0, r4
 8006168:	f000 f830 	bl	80061cc <_getpid_r>
 800616c:	462a      	mov	r2, r5
 800616e:	4601      	mov	r1, r0
 8006170:	4620      	mov	r0, r4
 8006172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006176:	f000 b817 	b.w	80061a8 <_kill_r>
 800617a:	2b01      	cmp	r3, #1
 800617c:	d00a      	beq.n	8006194 <_raise_r+0x4c>
 800617e:	1c59      	adds	r1, r3, #1
 8006180:	d103      	bne.n	800618a <_raise_r+0x42>
 8006182:	2316      	movs	r3, #22
 8006184:	6003      	str	r3, [r0, #0]
 8006186:	2001      	movs	r0, #1
 8006188:	e7e7      	b.n	800615a <_raise_r+0x12>
 800618a:	2400      	movs	r4, #0
 800618c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006190:	4628      	mov	r0, r5
 8006192:	4798      	blx	r3
 8006194:	2000      	movs	r0, #0
 8006196:	e7e0      	b.n	800615a <_raise_r+0x12>

08006198 <raise>:
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <raise+0xc>)
 800619a:	4601      	mov	r1, r0
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	f7ff bfd3 	b.w	8006148 <_raise_r>
 80061a2:	bf00      	nop
 80061a4:	20000010 	.word	0x20000010

080061a8 <_kill_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	; (80061c8 <_kill_r+0x20>)
 80061ac:	2300      	movs	r3, #0
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	602b      	str	r3, [r5, #0]
 80061b6:	f7fc fb7f 	bl	80028b8 <_kill>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d102      	bne.n	80061c4 <_kill_r+0x1c>
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	b103      	cbz	r3, 80061c4 <_kill_r+0x1c>
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	bf00      	nop
 80061c8:	20000c00 	.word	0x20000c00

080061cc <_getpid_r>:
 80061cc:	f7fc bb6c 	b.w	80028a8 <_getpid>

080061d0 <sniprintf>:
 80061d0:	b40c      	push	{r2, r3}
 80061d2:	b530      	push	{r4, r5, lr}
 80061d4:	4b17      	ldr	r3, [pc, #92]	; (8006234 <sniprintf+0x64>)
 80061d6:	1e0c      	subs	r4, r1, #0
 80061d8:	681d      	ldr	r5, [r3, #0]
 80061da:	b09d      	sub	sp, #116	; 0x74
 80061dc:	da08      	bge.n	80061f0 <sniprintf+0x20>
 80061de:	238b      	movs	r3, #139	; 0x8b
 80061e0:	602b      	str	r3, [r5, #0]
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	b01d      	add	sp, #116	; 0x74
 80061e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061ec:	b002      	add	sp, #8
 80061ee:	4770      	bx	lr
 80061f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061f8:	bf14      	ite	ne
 80061fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061fe:	4623      	moveq	r3, r4
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	9307      	str	r3, [sp, #28]
 8006204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006208:	9002      	str	r0, [sp, #8]
 800620a:	9006      	str	r0, [sp, #24]
 800620c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006210:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006212:	ab21      	add	r3, sp, #132	; 0x84
 8006214:	a902      	add	r1, sp, #8
 8006216:	4628      	mov	r0, r5
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	f000 f92b 	bl	8006474 <_svfiprintf_r>
 800621e:	1c43      	adds	r3, r0, #1
 8006220:	bfbc      	itt	lt
 8006222:	238b      	movlt	r3, #139	; 0x8b
 8006224:	602b      	strlt	r3, [r5, #0]
 8006226:	2c00      	cmp	r4, #0
 8006228:	d0dd      	beq.n	80061e6 <sniprintf+0x16>
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e7d9      	b.n	80061e6 <sniprintf+0x16>
 8006232:	bf00      	nop
 8006234:	20000010 	.word	0x20000010

08006238 <sbrk_aligned>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	4e0e      	ldr	r6, [pc, #56]	; (8006274 <sbrk_aligned+0x3c>)
 800623c:	460c      	mov	r4, r1
 800623e:	6831      	ldr	r1, [r6, #0]
 8006240:	4605      	mov	r5, r0
 8006242:	b911      	cbnz	r1, 800624a <sbrk_aligned+0x12>
 8006244:	f000 fbaa 	bl	800699c <_sbrk_r>
 8006248:	6030      	str	r0, [r6, #0]
 800624a:	4621      	mov	r1, r4
 800624c:	4628      	mov	r0, r5
 800624e:	f000 fba5 	bl	800699c <_sbrk_r>
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	d00a      	beq.n	800626c <sbrk_aligned+0x34>
 8006256:	1cc4      	adds	r4, r0, #3
 8006258:	f024 0403 	bic.w	r4, r4, #3
 800625c:	42a0      	cmp	r0, r4
 800625e:	d007      	beq.n	8006270 <sbrk_aligned+0x38>
 8006260:	1a21      	subs	r1, r4, r0
 8006262:	4628      	mov	r0, r5
 8006264:	f000 fb9a 	bl	800699c <_sbrk_r>
 8006268:	3001      	adds	r0, #1
 800626a:	d101      	bne.n	8006270 <sbrk_aligned+0x38>
 800626c:	f04f 34ff 	mov.w	r4, #4294967295
 8006270:	4620      	mov	r0, r4
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	20000bfc 	.word	0x20000bfc

08006278 <_malloc_r>:
 8006278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800627c:	1ccd      	adds	r5, r1, #3
 800627e:	f025 0503 	bic.w	r5, r5, #3
 8006282:	3508      	adds	r5, #8
 8006284:	2d0c      	cmp	r5, #12
 8006286:	bf38      	it	cc
 8006288:	250c      	movcc	r5, #12
 800628a:	2d00      	cmp	r5, #0
 800628c:	4607      	mov	r7, r0
 800628e:	db01      	blt.n	8006294 <_malloc_r+0x1c>
 8006290:	42a9      	cmp	r1, r5
 8006292:	d905      	bls.n	80062a0 <_malloc_r+0x28>
 8006294:	230c      	movs	r3, #12
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	2600      	movs	r6, #0
 800629a:	4630      	mov	r0, r6
 800629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a0:	4e2e      	ldr	r6, [pc, #184]	; (800635c <_malloc_r+0xe4>)
 80062a2:	f000 fba5 	bl	80069f0 <__malloc_lock>
 80062a6:	6833      	ldr	r3, [r6, #0]
 80062a8:	461c      	mov	r4, r3
 80062aa:	bb34      	cbnz	r4, 80062fa <_malloc_r+0x82>
 80062ac:	4629      	mov	r1, r5
 80062ae:	4638      	mov	r0, r7
 80062b0:	f7ff ffc2 	bl	8006238 <sbrk_aligned>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	4604      	mov	r4, r0
 80062b8:	d14d      	bne.n	8006356 <_malloc_r+0xde>
 80062ba:	6834      	ldr	r4, [r6, #0]
 80062bc:	4626      	mov	r6, r4
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d140      	bne.n	8006344 <_malloc_r+0xcc>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	4631      	mov	r1, r6
 80062c6:	4638      	mov	r0, r7
 80062c8:	eb04 0803 	add.w	r8, r4, r3
 80062cc:	f000 fb66 	bl	800699c <_sbrk_r>
 80062d0:	4580      	cmp	r8, r0
 80062d2:	d13a      	bne.n	800634a <_malloc_r+0xd2>
 80062d4:	6821      	ldr	r1, [r4, #0]
 80062d6:	3503      	adds	r5, #3
 80062d8:	1a6d      	subs	r5, r5, r1
 80062da:	f025 0503 	bic.w	r5, r5, #3
 80062de:	3508      	adds	r5, #8
 80062e0:	2d0c      	cmp	r5, #12
 80062e2:	bf38      	it	cc
 80062e4:	250c      	movcc	r5, #12
 80062e6:	4629      	mov	r1, r5
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ffa5 	bl	8006238 <sbrk_aligned>
 80062ee:	3001      	adds	r0, #1
 80062f0:	d02b      	beq.n	800634a <_malloc_r+0xd2>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	442b      	add	r3, r5
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	e00e      	b.n	8006318 <_malloc_r+0xa0>
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	1b52      	subs	r2, r2, r5
 80062fe:	d41e      	bmi.n	800633e <_malloc_r+0xc6>
 8006300:	2a0b      	cmp	r2, #11
 8006302:	d916      	bls.n	8006332 <_malloc_r+0xba>
 8006304:	1961      	adds	r1, r4, r5
 8006306:	42a3      	cmp	r3, r4
 8006308:	6025      	str	r5, [r4, #0]
 800630a:	bf18      	it	ne
 800630c:	6059      	strne	r1, [r3, #4]
 800630e:	6863      	ldr	r3, [r4, #4]
 8006310:	bf08      	it	eq
 8006312:	6031      	streq	r1, [r6, #0]
 8006314:	5162      	str	r2, [r4, r5]
 8006316:	604b      	str	r3, [r1, #4]
 8006318:	4638      	mov	r0, r7
 800631a:	f104 060b 	add.w	r6, r4, #11
 800631e:	f000 fb6d 	bl	80069fc <__malloc_unlock>
 8006322:	f026 0607 	bic.w	r6, r6, #7
 8006326:	1d23      	adds	r3, r4, #4
 8006328:	1af2      	subs	r2, r6, r3
 800632a:	d0b6      	beq.n	800629a <_malloc_r+0x22>
 800632c:	1b9b      	subs	r3, r3, r6
 800632e:	50a3      	str	r3, [r4, r2]
 8006330:	e7b3      	b.n	800629a <_malloc_r+0x22>
 8006332:	6862      	ldr	r2, [r4, #4]
 8006334:	42a3      	cmp	r3, r4
 8006336:	bf0c      	ite	eq
 8006338:	6032      	streq	r2, [r6, #0]
 800633a:	605a      	strne	r2, [r3, #4]
 800633c:	e7ec      	b.n	8006318 <_malloc_r+0xa0>
 800633e:	4623      	mov	r3, r4
 8006340:	6864      	ldr	r4, [r4, #4]
 8006342:	e7b2      	b.n	80062aa <_malloc_r+0x32>
 8006344:	4634      	mov	r4, r6
 8006346:	6876      	ldr	r6, [r6, #4]
 8006348:	e7b9      	b.n	80062be <_malloc_r+0x46>
 800634a:	230c      	movs	r3, #12
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	4638      	mov	r0, r7
 8006350:	f000 fb54 	bl	80069fc <__malloc_unlock>
 8006354:	e7a1      	b.n	800629a <_malloc_r+0x22>
 8006356:	6025      	str	r5, [r4, #0]
 8006358:	e7de      	b.n	8006318 <_malloc_r+0xa0>
 800635a:	bf00      	nop
 800635c:	20000bf8 	.word	0x20000bf8

08006360 <_realloc_r>:
 8006360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006364:	4680      	mov	r8, r0
 8006366:	4614      	mov	r4, r2
 8006368:	460e      	mov	r6, r1
 800636a:	b921      	cbnz	r1, 8006376 <_realloc_r+0x16>
 800636c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006370:	4611      	mov	r1, r2
 8006372:	f7ff bf81 	b.w	8006278 <_malloc_r>
 8006376:	b92a      	cbnz	r2, 8006384 <_realloc_r+0x24>
 8006378:	f000 fb46 	bl	8006a08 <_free_r>
 800637c:	4625      	mov	r5, r4
 800637e:	4628      	mov	r0, r5
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	f000 fb8c 	bl	8006aa0 <_malloc_usable_size_r>
 8006388:	4284      	cmp	r4, r0
 800638a:	4607      	mov	r7, r0
 800638c:	d802      	bhi.n	8006394 <_realloc_r+0x34>
 800638e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006392:	d812      	bhi.n	80063ba <_realloc_r+0x5a>
 8006394:	4621      	mov	r1, r4
 8006396:	4640      	mov	r0, r8
 8006398:	f7ff ff6e 	bl	8006278 <_malloc_r>
 800639c:	4605      	mov	r5, r0
 800639e:	2800      	cmp	r0, #0
 80063a0:	d0ed      	beq.n	800637e <_realloc_r+0x1e>
 80063a2:	42bc      	cmp	r4, r7
 80063a4:	4622      	mov	r2, r4
 80063a6:	4631      	mov	r1, r6
 80063a8:	bf28      	it	cs
 80063aa:	463a      	movcs	r2, r7
 80063ac:	f7ff feae 	bl	800610c <memcpy>
 80063b0:	4631      	mov	r1, r6
 80063b2:	4640      	mov	r0, r8
 80063b4:	f000 fb28 	bl	8006a08 <_free_r>
 80063b8:	e7e1      	b.n	800637e <_realloc_r+0x1e>
 80063ba:	4635      	mov	r5, r6
 80063bc:	e7df      	b.n	800637e <_realloc_r+0x1e>

080063be <__ssputs_r>:
 80063be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c2:	688e      	ldr	r6, [r1, #8]
 80063c4:	429e      	cmp	r6, r3
 80063c6:	4682      	mov	sl, r0
 80063c8:	460c      	mov	r4, r1
 80063ca:	4690      	mov	r8, r2
 80063cc:	461f      	mov	r7, r3
 80063ce:	d838      	bhi.n	8006442 <__ssputs_r+0x84>
 80063d0:	898a      	ldrh	r2, [r1, #12]
 80063d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063d6:	d032      	beq.n	800643e <__ssputs_r+0x80>
 80063d8:	6825      	ldr	r5, [r4, #0]
 80063da:	6909      	ldr	r1, [r1, #16]
 80063dc:	eba5 0901 	sub.w	r9, r5, r1
 80063e0:	6965      	ldr	r5, [r4, #20]
 80063e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063ea:	3301      	adds	r3, #1
 80063ec:	444b      	add	r3, r9
 80063ee:	106d      	asrs	r5, r5, #1
 80063f0:	429d      	cmp	r5, r3
 80063f2:	bf38      	it	cc
 80063f4:	461d      	movcc	r5, r3
 80063f6:	0553      	lsls	r3, r2, #21
 80063f8:	d531      	bpl.n	800645e <__ssputs_r+0xa0>
 80063fa:	4629      	mov	r1, r5
 80063fc:	f7ff ff3c 	bl	8006278 <_malloc_r>
 8006400:	4606      	mov	r6, r0
 8006402:	b950      	cbnz	r0, 800641a <__ssputs_r+0x5c>
 8006404:	230c      	movs	r3, #12
 8006406:	f8ca 3000 	str.w	r3, [sl]
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	f04f 30ff 	mov.w	r0, #4294967295
 8006416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641a:	6921      	ldr	r1, [r4, #16]
 800641c:	464a      	mov	r2, r9
 800641e:	f7ff fe75 	bl	800610c <memcpy>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	6126      	str	r6, [r4, #16]
 8006430:	6165      	str	r5, [r4, #20]
 8006432:	444e      	add	r6, r9
 8006434:	eba5 0509 	sub.w	r5, r5, r9
 8006438:	6026      	str	r6, [r4, #0]
 800643a:	60a5      	str	r5, [r4, #8]
 800643c:	463e      	mov	r6, r7
 800643e:	42be      	cmp	r6, r7
 8006440:	d900      	bls.n	8006444 <__ssputs_r+0x86>
 8006442:	463e      	mov	r6, r7
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	4632      	mov	r2, r6
 8006448:	4641      	mov	r1, r8
 800644a:	f000 fab7 	bl	80069bc <memmove>
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	1b9b      	subs	r3, r3, r6
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	4433      	add	r3, r6
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	2000      	movs	r0, #0
 800645c:	e7db      	b.n	8006416 <__ssputs_r+0x58>
 800645e:	462a      	mov	r2, r5
 8006460:	f7ff ff7e 	bl	8006360 <_realloc_r>
 8006464:	4606      	mov	r6, r0
 8006466:	2800      	cmp	r0, #0
 8006468:	d1e1      	bne.n	800642e <__ssputs_r+0x70>
 800646a:	6921      	ldr	r1, [r4, #16]
 800646c:	4650      	mov	r0, sl
 800646e:	f000 facb 	bl	8006a08 <_free_r>
 8006472:	e7c7      	b.n	8006404 <__ssputs_r+0x46>

08006474 <_svfiprintf_r>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	4698      	mov	r8, r3
 800647a:	898b      	ldrh	r3, [r1, #12]
 800647c:	061b      	lsls	r3, r3, #24
 800647e:	b09d      	sub	sp, #116	; 0x74
 8006480:	4607      	mov	r7, r0
 8006482:	460d      	mov	r5, r1
 8006484:	4614      	mov	r4, r2
 8006486:	d50e      	bpl.n	80064a6 <_svfiprintf_r+0x32>
 8006488:	690b      	ldr	r3, [r1, #16]
 800648a:	b963      	cbnz	r3, 80064a6 <_svfiprintf_r+0x32>
 800648c:	2140      	movs	r1, #64	; 0x40
 800648e:	f7ff fef3 	bl	8006278 <_malloc_r>
 8006492:	6028      	str	r0, [r5, #0]
 8006494:	6128      	str	r0, [r5, #16]
 8006496:	b920      	cbnz	r0, 80064a2 <_svfiprintf_r+0x2e>
 8006498:	230c      	movs	r3, #12
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	e0d1      	b.n	8006646 <_svfiprintf_r+0x1d2>
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	616b      	str	r3, [r5, #20]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9309      	str	r3, [sp, #36]	; 0x24
 80064aa:	2320      	movs	r3, #32
 80064ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b4:	2330      	movs	r3, #48	; 0x30
 80064b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006660 <_svfiprintf_r+0x1ec>
 80064ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064be:	f04f 0901 	mov.w	r9, #1
 80064c2:	4623      	mov	r3, r4
 80064c4:	469a      	mov	sl, r3
 80064c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ca:	b10a      	cbz	r2, 80064d0 <_svfiprintf_r+0x5c>
 80064cc:	2a25      	cmp	r2, #37	; 0x25
 80064ce:	d1f9      	bne.n	80064c4 <_svfiprintf_r+0x50>
 80064d0:	ebba 0b04 	subs.w	fp, sl, r4
 80064d4:	d00b      	beq.n	80064ee <_svfiprintf_r+0x7a>
 80064d6:	465b      	mov	r3, fp
 80064d8:	4622      	mov	r2, r4
 80064da:	4629      	mov	r1, r5
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff ff6e 	bl	80063be <__ssputs_r>
 80064e2:	3001      	adds	r0, #1
 80064e4:	f000 80aa 	beq.w	800663c <_svfiprintf_r+0x1c8>
 80064e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ea:	445a      	add	r2, fp
 80064ec:	9209      	str	r2, [sp, #36]	; 0x24
 80064ee:	f89a 3000 	ldrb.w	r3, [sl]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 80a2 	beq.w	800663c <_svfiprintf_r+0x1c8>
 80064f8:	2300      	movs	r3, #0
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295
 80064fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006502:	f10a 0a01 	add.w	sl, sl, #1
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	9307      	str	r3, [sp, #28]
 800650a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650e:	931a      	str	r3, [sp, #104]	; 0x68
 8006510:	4654      	mov	r4, sl
 8006512:	2205      	movs	r2, #5
 8006514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006518:	4851      	ldr	r0, [pc, #324]	; (8006660 <_svfiprintf_r+0x1ec>)
 800651a:	f7f9 fe89 	bl	8000230 <memchr>
 800651e:	9a04      	ldr	r2, [sp, #16]
 8006520:	b9d8      	cbnz	r0, 800655a <_svfiprintf_r+0xe6>
 8006522:	06d0      	lsls	r0, r2, #27
 8006524:	bf44      	itt	mi
 8006526:	2320      	movmi	r3, #32
 8006528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800652c:	0711      	lsls	r1, r2, #28
 800652e:	bf44      	itt	mi
 8006530:	232b      	movmi	r3, #43	; 0x2b
 8006532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006536:	f89a 3000 	ldrb.w	r3, [sl]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d015      	beq.n	800656a <_svfiprintf_r+0xf6>
 800653e:	9a07      	ldr	r2, [sp, #28]
 8006540:	4654      	mov	r4, sl
 8006542:	2000      	movs	r0, #0
 8006544:	f04f 0c0a 	mov.w	ip, #10
 8006548:	4621      	mov	r1, r4
 800654a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654e:	3b30      	subs	r3, #48	; 0x30
 8006550:	2b09      	cmp	r3, #9
 8006552:	d94e      	bls.n	80065f2 <_svfiprintf_r+0x17e>
 8006554:	b1b0      	cbz	r0, 8006584 <_svfiprintf_r+0x110>
 8006556:	9207      	str	r2, [sp, #28]
 8006558:	e014      	b.n	8006584 <_svfiprintf_r+0x110>
 800655a:	eba0 0308 	sub.w	r3, r0, r8
 800655e:	fa09 f303 	lsl.w	r3, r9, r3
 8006562:	4313      	orrs	r3, r2
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	46a2      	mov	sl, r4
 8006568:	e7d2      	b.n	8006510 <_svfiprintf_r+0x9c>
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	1d19      	adds	r1, r3, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	9103      	str	r1, [sp, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	bfbb      	ittet	lt
 8006576:	425b      	neglt	r3, r3
 8006578:	f042 0202 	orrlt.w	r2, r2, #2
 800657c:	9307      	strge	r3, [sp, #28]
 800657e:	9307      	strlt	r3, [sp, #28]
 8006580:	bfb8      	it	lt
 8006582:	9204      	strlt	r2, [sp, #16]
 8006584:	7823      	ldrb	r3, [r4, #0]
 8006586:	2b2e      	cmp	r3, #46	; 0x2e
 8006588:	d10c      	bne.n	80065a4 <_svfiprintf_r+0x130>
 800658a:	7863      	ldrb	r3, [r4, #1]
 800658c:	2b2a      	cmp	r3, #42	; 0x2a
 800658e:	d135      	bne.n	80065fc <_svfiprintf_r+0x188>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	1d1a      	adds	r2, r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	9203      	str	r2, [sp, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfb8      	it	lt
 800659c:	f04f 33ff 	movlt.w	r3, #4294967295
 80065a0:	3402      	adds	r4, #2
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006670 <_svfiprintf_r+0x1fc>
 80065a8:	7821      	ldrb	r1, [r4, #0]
 80065aa:	2203      	movs	r2, #3
 80065ac:	4650      	mov	r0, sl
 80065ae:	f7f9 fe3f 	bl	8000230 <memchr>
 80065b2:	b140      	cbz	r0, 80065c6 <_svfiprintf_r+0x152>
 80065b4:	2340      	movs	r3, #64	; 0x40
 80065b6:	eba0 000a 	sub.w	r0, r0, sl
 80065ba:	fa03 f000 	lsl.w	r0, r3, r0
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	4303      	orrs	r3, r0
 80065c2:	3401      	adds	r4, #1
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ca:	4826      	ldr	r0, [pc, #152]	; (8006664 <_svfiprintf_r+0x1f0>)
 80065cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065d0:	2206      	movs	r2, #6
 80065d2:	f7f9 fe2d 	bl	8000230 <memchr>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d038      	beq.n	800664c <_svfiprintf_r+0x1d8>
 80065da:	4b23      	ldr	r3, [pc, #140]	; (8006668 <_svfiprintf_r+0x1f4>)
 80065dc:	bb1b      	cbnz	r3, 8006626 <_svfiprintf_r+0x1b2>
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	3307      	adds	r3, #7
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	3308      	adds	r3, #8
 80065e8:	9303      	str	r3, [sp, #12]
 80065ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ec:	4433      	add	r3, r6
 80065ee:	9309      	str	r3, [sp, #36]	; 0x24
 80065f0:	e767      	b.n	80064c2 <_svfiprintf_r+0x4e>
 80065f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f6:	460c      	mov	r4, r1
 80065f8:	2001      	movs	r0, #1
 80065fa:	e7a5      	b.n	8006548 <_svfiprintf_r+0xd4>
 80065fc:	2300      	movs	r3, #0
 80065fe:	3401      	adds	r4, #1
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	4619      	mov	r1, r3
 8006604:	f04f 0c0a 	mov.w	ip, #10
 8006608:	4620      	mov	r0, r4
 800660a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660e:	3a30      	subs	r2, #48	; 0x30
 8006610:	2a09      	cmp	r2, #9
 8006612:	d903      	bls.n	800661c <_svfiprintf_r+0x1a8>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0c5      	beq.n	80065a4 <_svfiprintf_r+0x130>
 8006618:	9105      	str	r1, [sp, #20]
 800661a:	e7c3      	b.n	80065a4 <_svfiprintf_r+0x130>
 800661c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006620:	4604      	mov	r4, r0
 8006622:	2301      	movs	r3, #1
 8006624:	e7f0      	b.n	8006608 <_svfiprintf_r+0x194>
 8006626:	ab03      	add	r3, sp, #12
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	462a      	mov	r2, r5
 800662c:	4b0f      	ldr	r3, [pc, #60]	; (800666c <_svfiprintf_r+0x1f8>)
 800662e:	a904      	add	r1, sp, #16
 8006630:	4638      	mov	r0, r7
 8006632:	f3af 8000 	nop.w
 8006636:	1c42      	adds	r2, r0, #1
 8006638:	4606      	mov	r6, r0
 800663a:	d1d6      	bne.n	80065ea <_svfiprintf_r+0x176>
 800663c:	89ab      	ldrh	r3, [r5, #12]
 800663e:	065b      	lsls	r3, r3, #25
 8006640:	f53f af2c 	bmi.w	800649c <_svfiprintf_r+0x28>
 8006644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006646:	b01d      	add	sp, #116	; 0x74
 8006648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	462a      	mov	r2, r5
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <_svfiprintf_r+0x1f8>)
 8006654:	a904      	add	r1, sp, #16
 8006656:	4638      	mov	r0, r7
 8006658:	f000 f87a 	bl	8006750 <_printf_i>
 800665c:	e7eb      	b.n	8006636 <_svfiprintf_r+0x1c2>
 800665e:	bf00      	nop
 8006660:	08006d3c 	.word	0x08006d3c
 8006664:	08006d46 	.word	0x08006d46
 8006668:	00000000 	.word	0x00000000
 800666c:	080063bf 	.word	0x080063bf
 8006670:	08006d42 	.word	0x08006d42

08006674 <_printf_common>:
 8006674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	4616      	mov	r6, r2
 800667a:	4699      	mov	r9, r3
 800667c:	688a      	ldr	r2, [r1, #8]
 800667e:	690b      	ldr	r3, [r1, #16]
 8006680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006684:	4293      	cmp	r3, r2
 8006686:	bfb8      	it	lt
 8006688:	4613      	movlt	r3, r2
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006690:	4607      	mov	r7, r0
 8006692:	460c      	mov	r4, r1
 8006694:	b10a      	cbz	r2, 800669a <_printf_common+0x26>
 8006696:	3301      	adds	r3, #1
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	0699      	lsls	r1, r3, #26
 800669e:	bf42      	ittt	mi
 80066a0:	6833      	ldrmi	r3, [r6, #0]
 80066a2:	3302      	addmi	r3, #2
 80066a4:	6033      	strmi	r3, [r6, #0]
 80066a6:	6825      	ldr	r5, [r4, #0]
 80066a8:	f015 0506 	ands.w	r5, r5, #6
 80066ac:	d106      	bne.n	80066bc <_printf_common+0x48>
 80066ae:	f104 0a19 	add.w	sl, r4, #25
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	6832      	ldr	r2, [r6, #0]
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	42ab      	cmp	r3, r5
 80066ba:	dc26      	bgt.n	800670a <_printf_common+0x96>
 80066bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066c0:	1e13      	subs	r3, r2, #0
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	bf18      	it	ne
 80066c6:	2301      	movne	r3, #1
 80066c8:	0692      	lsls	r2, r2, #26
 80066ca:	d42b      	bmi.n	8006724 <_printf_common+0xb0>
 80066cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066d0:	4649      	mov	r1, r9
 80066d2:	4638      	mov	r0, r7
 80066d4:	47c0      	blx	r8
 80066d6:	3001      	adds	r0, #1
 80066d8:	d01e      	beq.n	8006718 <_printf_common+0xa4>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	68e5      	ldr	r5, [r4, #12]
 80066de:	6832      	ldr	r2, [r6, #0]
 80066e0:	f003 0306 	and.w	r3, r3, #6
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	bf08      	it	eq
 80066e8:	1aad      	subeq	r5, r5, r2
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	6922      	ldr	r2, [r4, #16]
 80066ee:	bf0c      	ite	eq
 80066f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f4:	2500      	movne	r5, #0
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bfc4      	itt	gt
 80066fa:	1a9b      	subgt	r3, r3, r2
 80066fc:	18ed      	addgt	r5, r5, r3
 80066fe:	2600      	movs	r6, #0
 8006700:	341a      	adds	r4, #26
 8006702:	42b5      	cmp	r5, r6
 8006704:	d11a      	bne.n	800673c <_printf_common+0xc8>
 8006706:	2000      	movs	r0, #0
 8006708:	e008      	b.n	800671c <_printf_common+0xa8>
 800670a:	2301      	movs	r3, #1
 800670c:	4652      	mov	r2, sl
 800670e:	4649      	mov	r1, r9
 8006710:	4638      	mov	r0, r7
 8006712:	47c0      	blx	r8
 8006714:	3001      	adds	r0, #1
 8006716:	d103      	bne.n	8006720 <_printf_common+0xac>
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006720:	3501      	adds	r5, #1
 8006722:	e7c6      	b.n	80066b2 <_printf_common+0x3e>
 8006724:	18e1      	adds	r1, r4, r3
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	2030      	movs	r0, #48	; 0x30
 800672a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800672e:	4422      	add	r2, r4
 8006730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006738:	3302      	adds	r3, #2
 800673a:	e7c7      	b.n	80066cc <_printf_common+0x58>
 800673c:	2301      	movs	r3, #1
 800673e:	4622      	mov	r2, r4
 8006740:	4649      	mov	r1, r9
 8006742:	4638      	mov	r0, r7
 8006744:	47c0      	blx	r8
 8006746:	3001      	adds	r0, #1
 8006748:	d0e6      	beq.n	8006718 <_printf_common+0xa4>
 800674a:	3601      	adds	r6, #1
 800674c:	e7d9      	b.n	8006702 <_printf_common+0x8e>
	...

08006750 <_printf_i>:
 8006750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006754:	7e0f      	ldrb	r7, [r1, #24]
 8006756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006758:	2f78      	cmp	r7, #120	; 0x78
 800675a:	4691      	mov	r9, r2
 800675c:	4680      	mov	r8, r0
 800675e:	460c      	mov	r4, r1
 8006760:	469a      	mov	sl, r3
 8006762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006766:	d807      	bhi.n	8006778 <_printf_i+0x28>
 8006768:	2f62      	cmp	r7, #98	; 0x62
 800676a:	d80a      	bhi.n	8006782 <_printf_i+0x32>
 800676c:	2f00      	cmp	r7, #0
 800676e:	f000 80d8 	beq.w	8006922 <_printf_i+0x1d2>
 8006772:	2f58      	cmp	r7, #88	; 0x58
 8006774:	f000 80a3 	beq.w	80068be <_printf_i+0x16e>
 8006778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800677c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006780:	e03a      	b.n	80067f8 <_printf_i+0xa8>
 8006782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006786:	2b15      	cmp	r3, #21
 8006788:	d8f6      	bhi.n	8006778 <_printf_i+0x28>
 800678a:	a101      	add	r1, pc, #4	; (adr r1, 8006790 <_printf_i+0x40>)
 800678c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067fd 	.word	0x080067fd
 8006798:	08006779 	.word	0x08006779
 800679c:	08006779 	.word	0x08006779
 80067a0:	08006779 	.word	0x08006779
 80067a4:	08006779 	.word	0x08006779
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	08006779 	.word	0x08006779
 80067b0:	08006779 	.word	0x08006779
 80067b4:	08006779 	.word	0x08006779
 80067b8:	08006779 	.word	0x08006779
 80067bc:	08006909 	.word	0x08006909
 80067c0:	0800682d 	.word	0x0800682d
 80067c4:	080068eb 	.word	0x080068eb
 80067c8:	08006779 	.word	0x08006779
 80067cc:	08006779 	.word	0x08006779
 80067d0:	0800692b 	.word	0x0800692b
 80067d4:	08006779 	.word	0x08006779
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	08006779 	.word	0x08006779
 80067e0:	08006779 	.word	0x08006779
 80067e4:	080068f3 	.word	0x080068f3
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	1d1a      	adds	r2, r3, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	602a      	str	r2, [r5, #0]
 80067f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0a3      	b.n	8006944 <_printf_i+0x1f4>
 80067fc:	6820      	ldr	r0, [r4, #0]
 80067fe:	6829      	ldr	r1, [r5, #0]
 8006800:	0606      	lsls	r6, r0, #24
 8006802:	f101 0304 	add.w	r3, r1, #4
 8006806:	d50a      	bpl.n	800681e <_printf_i+0xce>
 8006808:	680e      	ldr	r6, [r1, #0]
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	2e00      	cmp	r6, #0
 800680e:	da03      	bge.n	8006818 <_printf_i+0xc8>
 8006810:	232d      	movs	r3, #45	; 0x2d
 8006812:	4276      	negs	r6, r6
 8006814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006818:	485e      	ldr	r0, [pc, #376]	; (8006994 <_printf_i+0x244>)
 800681a:	230a      	movs	r3, #10
 800681c:	e019      	b.n	8006852 <_printf_i+0x102>
 800681e:	680e      	ldr	r6, [r1, #0]
 8006820:	602b      	str	r3, [r5, #0]
 8006822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006826:	bf18      	it	ne
 8006828:	b236      	sxthne	r6, r6
 800682a:	e7ef      	b.n	800680c <_printf_i+0xbc>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	6029      	str	r1, [r5, #0]
 8006834:	0601      	lsls	r1, r0, #24
 8006836:	d501      	bpl.n	800683c <_printf_i+0xec>
 8006838:	681e      	ldr	r6, [r3, #0]
 800683a:	e002      	b.n	8006842 <_printf_i+0xf2>
 800683c:	0646      	lsls	r6, r0, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0xe8>
 8006840:	881e      	ldrh	r6, [r3, #0]
 8006842:	4854      	ldr	r0, [pc, #336]	; (8006994 <_printf_i+0x244>)
 8006844:	2f6f      	cmp	r7, #111	; 0x6f
 8006846:	bf0c      	ite	eq
 8006848:	2308      	moveq	r3, #8
 800684a:	230a      	movne	r3, #10
 800684c:	2100      	movs	r1, #0
 800684e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006852:	6865      	ldr	r5, [r4, #4]
 8006854:	60a5      	str	r5, [r4, #8]
 8006856:	2d00      	cmp	r5, #0
 8006858:	bfa2      	ittt	ge
 800685a:	6821      	ldrge	r1, [r4, #0]
 800685c:	f021 0104 	bicge.w	r1, r1, #4
 8006860:	6021      	strge	r1, [r4, #0]
 8006862:	b90e      	cbnz	r6, 8006868 <_printf_i+0x118>
 8006864:	2d00      	cmp	r5, #0
 8006866:	d04d      	beq.n	8006904 <_printf_i+0x1b4>
 8006868:	4615      	mov	r5, r2
 800686a:	fbb6 f1f3 	udiv	r1, r6, r3
 800686e:	fb03 6711 	mls	r7, r3, r1, r6
 8006872:	5dc7      	ldrb	r7, [r0, r7]
 8006874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006878:	4637      	mov	r7, r6
 800687a:	42bb      	cmp	r3, r7
 800687c:	460e      	mov	r6, r1
 800687e:	d9f4      	bls.n	800686a <_printf_i+0x11a>
 8006880:	2b08      	cmp	r3, #8
 8006882:	d10b      	bne.n	800689c <_printf_i+0x14c>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07de      	lsls	r6, r3, #31
 8006888:	d508      	bpl.n	800689c <_printf_i+0x14c>
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	6861      	ldr	r1, [r4, #4]
 800688e:	4299      	cmp	r1, r3
 8006890:	bfde      	ittt	le
 8006892:	2330      	movle	r3, #48	; 0x30
 8006894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800689c:	1b52      	subs	r2, r2, r5
 800689e:	6122      	str	r2, [r4, #16]
 80068a0:	f8cd a000 	str.w	sl, [sp]
 80068a4:	464b      	mov	r3, r9
 80068a6:	aa03      	add	r2, sp, #12
 80068a8:	4621      	mov	r1, r4
 80068aa:	4640      	mov	r0, r8
 80068ac:	f7ff fee2 	bl	8006674 <_printf_common>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d14c      	bne.n	800694e <_printf_i+0x1fe>
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	b004      	add	sp, #16
 80068ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068be:	4835      	ldr	r0, [pc, #212]	; (8006994 <_printf_i+0x244>)
 80068c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068c4:	6829      	ldr	r1, [r5, #0]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068cc:	6029      	str	r1, [r5, #0]
 80068ce:	061d      	lsls	r5, r3, #24
 80068d0:	d514      	bpl.n	80068fc <_printf_i+0x1ac>
 80068d2:	07df      	lsls	r7, r3, #31
 80068d4:	bf44      	itt	mi
 80068d6:	f043 0320 	orrmi.w	r3, r3, #32
 80068da:	6023      	strmi	r3, [r4, #0]
 80068dc:	b91e      	cbnz	r6, 80068e6 <_printf_i+0x196>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	f023 0320 	bic.w	r3, r3, #32
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	2310      	movs	r3, #16
 80068e8:	e7b0      	b.n	800684c <_printf_i+0xfc>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	f043 0320 	orr.w	r3, r3, #32
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	2378      	movs	r3, #120	; 0x78
 80068f4:	4828      	ldr	r0, [pc, #160]	; (8006998 <_printf_i+0x248>)
 80068f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068fa:	e7e3      	b.n	80068c4 <_printf_i+0x174>
 80068fc:	0659      	lsls	r1, r3, #25
 80068fe:	bf48      	it	mi
 8006900:	b2b6      	uxthmi	r6, r6
 8006902:	e7e6      	b.n	80068d2 <_printf_i+0x182>
 8006904:	4615      	mov	r5, r2
 8006906:	e7bb      	b.n	8006880 <_printf_i+0x130>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	6826      	ldr	r6, [r4, #0]
 800690c:	6961      	ldr	r1, [r4, #20]
 800690e:	1d18      	adds	r0, r3, #4
 8006910:	6028      	str	r0, [r5, #0]
 8006912:	0635      	lsls	r5, r6, #24
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	d501      	bpl.n	800691c <_printf_i+0x1cc>
 8006918:	6019      	str	r1, [r3, #0]
 800691a:	e002      	b.n	8006922 <_printf_i+0x1d2>
 800691c:	0670      	lsls	r0, r6, #25
 800691e:	d5fb      	bpl.n	8006918 <_printf_i+0x1c8>
 8006920:	8019      	strh	r1, [r3, #0]
 8006922:	2300      	movs	r3, #0
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	4615      	mov	r5, r2
 8006928:	e7ba      	b.n	80068a0 <_printf_i+0x150>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	1d1a      	adds	r2, r3, #4
 800692e:	602a      	str	r2, [r5, #0]
 8006930:	681d      	ldr	r5, [r3, #0]
 8006932:	6862      	ldr	r2, [r4, #4]
 8006934:	2100      	movs	r1, #0
 8006936:	4628      	mov	r0, r5
 8006938:	f7f9 fc7a 	bl	8000230 <memchr>
 800693c:	b108      	cbz	r0, 8006942 <_printf_i+0x1f2>
 800693e:	1b40      	subs	r0, r0, r5
 8006940:	6060      	str	r0, [r4, #4]
 8006942:	6863      	ldr	r3, [r4, #4]
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	2300      	movs	r3, #0
 8006948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800694c:	e7a8      	b.n	80068a0 <_printf_i+0x150>
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	462a      	mov	r2, r5
 8006952:	4649      	mov	r1, r9
 8006954:	4640      	mov	r0, r8
 8006956:	47d0      	blx	sl
 8006958:	3001      	adds	r0, #1
 800695a:	d0ab      	beq.n	80068b4 <_printf_i+0x164>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	079b      	lsls	r3, r3, #30
 8006960:	d413      	bmi.n	800698a <_printf_i+0x23a>
 8006962:	68e0      	ldr	r0, [r4, #12]
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	4298      	cmp	r0, r3
 8006968:	bfb8      	it	lt
 800696a:	4618      	movlt	r0, r3
 800696c:	e7a4      	b.n	80068b8 <_printf_i+0x168>
 800696e:	2301      	movs	r3, #1
 8006970:	4632      	mov	r2, r6
 8006972:	4649      	mov	r1, r9
 8006974:	4640      	mov	r0, r8
 8006976:	47d0      	blx	sl
 8006978:	3001      	adds	r0, #1
 800697a:	d09b      	beq.n	80068b4 <_printf_i+0x164>
 800697c:	3501      	adds	r5, #1
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	9903      	ldr	r1, [sp, #12]
 8006982:	1a5b      	subs	r3, r3, r1
 8006984:	42ab      	cmp	r3, r5
 8006986:	dcf2      	bgt.n	800696e <_printf_i+0x21e>
 8006988:	e7eb      	b.n	8006962 <_printf_i+0x212>
 800698a:	2500      	movs	r5, #0
 800698c:	f104 0619 	add.w	r6, r4, #25
 8006990:	e7f5      	b.n	800697e <_printf_i+0x22e>
 8006992:	bf00      	nop
 8006994:	08006d4d 	.word	0x08006d4d
 8006998:	08006d5e 	.word	0x08006d5e

0800699c <_sbrk_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d06      	ldr	r5, [pc, #24]	; (80069b8 <_sbrk_r+0x1c>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	f7fb ffa0 	bl	80028ec <_sbrk>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_sbrk_r+0x1a>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_sbrk_r+0x1a>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	20000c00 	.word	0x20000c00

080069bc <memmove>:
 80069bc:	4288      	cmp	r0, r1
 80069be:	b510      	push	{r4, lr}
 80069c0:	eb01 0402 	add.w	r4, r1, r2
 80069c4:	d902      	bls.n	80069cc <memmove+0x10>
 80069c6:	4284      	cmp	r4, r0
 80069c8:	4623      	mov	r3, r4
 80069ca:	d807      	bhi.n	80069dc <memmove+0x20>
 80069cc:	1e43      	subs	r3, r0, #1
 80069ce:	42a1      	cmp	r1, r4
 80069d0:	d008      	beq.n	80069e4 <memmove+0x28>
 80069d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069da:	e7f8      	b.n	80069ce <memmove+0x12>
 80069dc:	4402      	add	r2, r0
 80069de:	4601      	mov	r1, r0
 80069e0:	428a      	cmp	r2, r1
 80069e2:	d100      	bne.n	80069e6 <memmove+0x2a>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069ee:	e7f7      	b.n	80069e0 <memmove+0x24>

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f000 b85d 	b.w	8006ab0 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000c04 	.word	0x20000c04

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f000 b858 	b.w	8006ab2 <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000c04 	.word	0x20000c04

08006a08 <_free_r>:
 8006a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a0a:	2900      	cmp	r1, #0
 8006a0c:	d044      	beq.n	8006a98 <_free_r+0x90>
 8006a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a12:	9001      	str	r0, [sp, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f1a1 0404 	sub.w	r4, r1, #4
 8006a1a:	bfb8      	it	lt
 8006a1c:	18e4      	addlt	r4, r4, r3
 8006a1e:	f7ff ffe7 	bl	80069f0 <__malloc_lock>
 8006a22:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <_free_r+0x94>)
 8006a24:	9801      	ldr	r0, [sp, #4]
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	b933      	cbnz	r3, 8006a38 <_free_r+0x30>
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	6014      	str	r4, [r2, #0]
 8006a2e:	b003      	add	sp, #12
 8006a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a34:	f7ff bfe2 	b.w	80069fc <__malloc_unlock>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d908      	bls.n	8006a4e <_free_r+0x46>
 8006a3c:	6825      	ldr	r5, [r4, #0]
 8006a3e:	1961      	adds	r1, r4, r5
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf01      	itttt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	1949      	addeq	r1, r1, r5
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	e7ed      	b.n	8006a2a <_free_r+0x22>
 8006a4e:	461a      	mov	r2, r3
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	b10b      	cbz	r3, 8006a58 <_free_r+0x50>
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d9fa      	bls.n	8006a4e <_free_r+0x46>
 8006a58:	6811      	ldr	r1, [r2, #0]
 8006a5a:	1855      	adds	r5, r2, r1
 8006a5c:	42a5      	cmp	r5, r4
 8006a5e:	d10b      	bne.n	8006a78 <_free_r+0x70>
 8006a60:	6824      	ldr	r4, [r4, #0]
 8006a62:	4421      	add	r1, r4
 8006a64:	1854      	adds	r4, r2, r1
 8006a66:	42a3      	cmp	r3, r4
 8006a68:	6011      	str	r1, [r2, #0]
 8006a6a:	d1e0      	bne.n	8006a2e <_free_r+0x26>
 8006a6c:	681c      	ldr	r4, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	6053      	str	r3, [r2, #4]
 8006a72:	4421      	add	r1, r4
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	e7da      	b.n	8006a2e <_free_r+0x26>
 8006a78:	d902      	bls.n	8006a80 <_free_r+0x78>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	6003      	str	r3, [r0, #0]
 8006a7e:	e7d6      	b.n	8006a2e <_free_r+0x26>
 8006a80:	6825      	ldr	r5, [r4, #0]
 8006a82:	1961      	adds	r1, r4, r5
 8006a84:	428b      	cmp	r3, r1
 8006a86:	bf04      	itt	eq
 8006a88:	6819      	ldreq	r1, [r3, #0]
 8006a8a:	685b      	ldreq	r3, [r3, #4]
 8006a8c:	6063      	str	r3, [r4, #4]
 8006a8e:	bf04      	itt	eq
 8006a90:	1949      	addeq	r1, r1, r5
 8006a92:	6021      	streq	r1, [r4, #0]
 8006a94:	6054      	str	r4, [r2, #4]
 8006a96:	e7ca      	b.n	8006a2e <_free_r+0x26>
 8006a98:	b003      	add	sp, #12
 8006a9a:	bd30      	pop	{r4, r5, pc}
 8006a9c:	20000bf8 	.word	0x20000bf8

08006aa0 <_malloc_usable_size_r>:
 8006aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa4:	1f18      	subs	r0, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bfbc      	itt	lt
 8006aaa:	580b      	ldrlt	r3, [r1, r0]
 8006aac:	18c0      	addlt	r0, r0, r3
 8006aae:	4770      	bx	lr

08006ab0 <__retarget_lock_acquire_recursive>:
 8006ab0:	4770      	bx	lr

08006ab2 <__retarget_lock_release_recursive>:
 8006ab2:	4770      	bx	lr

08006ab4 <_init>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr

08006ac0 <_fini>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr
